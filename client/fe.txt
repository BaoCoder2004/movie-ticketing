# ==================================================
# Path: D:\movie-ticketing\client
# Detected tech: javascript, python, react, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
client/
├── node_modules/
├── public/
│   └── vite.svg
├── src/
│   ├── assets/
│   │   └── react.svg
│   ├── components/
│   │   ├── admin/
│   │   │   ├── BranchMovies.jsx
│   │   │   ├── ExhibitorRoomsSeats.jsx
│   │   │   └── MovieRelations.jsx
│   │   └── AdminSidebar.jsx
│   ├── layouts/
│   │   └── AdminLayout.jsx
│   ├── lib/
│   ├── pages/
│   │   ├── admin/
│   │   │   ├── AdminBranches.jsx
│   │   │   ├── AdminCinemas.jsx
│   │   │   ├── AdminDashboard.jsx
│   │   │   ├── AdminMovies.jsx
│   │   │   ├── AdminOrders.jsx
│   │   │   ├── AdminPayments.jsx
│   │   │   ├── AdminReports.jsx
│   │   │   ├── AdminRooms.jsx
│   │   │   ├── AdminSeats.jsx
│   │   │   ├── AdminShowtimes.jsx
│   │   │   ├── AdminTickets.jsx
│   │   │   ├── AdminUsers.jsx
│   │   │   └── AdminVouchers.jsx
│   │   ├── Checkout.jsx
│   │   ├── Login.jsx
│   │   ├── MovieDetail.jsx
│   │   ├── Movies.jsx
│   │   ├── Register.jsx
│   │   ├── SeatMap.jsx
│   │   ├── Tickets.jsx
│   │   └── UserHome.jsx
│   ├── App.css
│   ├── App.jsx
│   ├── index.css
│   └── main.jsx
├── .env
├── .gitignore
├── README.md
├── eslint.config.js
├── index.html
├── package-lock.json
├── package.json
├── source_dump.txt
└── vite.config.js
```

## FILE CONTENTS

### eslint.config.js
```js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

```

### README.md
```md
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

```

### vite.config.js
```js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:4000',
        changeOrigin: true,
      },
    },
  },
})

```

### src\App.jsx
```jsx
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import Login from './pages/Login';
import Register from './pages/Register';
import UserHome from './pages/UserHome';

import AdminLayout from './layouts/AdminLayout';
import { getAuth } from './lib/auth';

// User booking flow
import MoviesList from './pages/Movies';
import MovieDetail from './pages/MovieDetail';
import SeatMap from './pages/SeatMap';
import Checkout from './pages/Checkout';
import OrderTickets from './pages/Tickets';

// Admin placeholders
import AdminDashboard from './pages/admin/AdminDashboard';
import Movies from './pages/admin/AdminMovies';
import Cinemas from './pages/admin/AdminCinemas';
import Branches from './pages/admin/AdminBranches';
import Rooms from './pages/admin/AdminRooms';
import Seats from './pages/admin/AdminSeats';
import Showtimes from './pages/admin/AdminShowtimes';
import Users from './pages/admin/AdminUsers';
import Orders from './pages/admin/AdminOrders';
import Payments from './pages/admin/AdminPayments';
import Tickets from './pages/admin/AdminTickets';
import Vouchers from './pages/admin/AdminVouchers';
import Reports from './pages/admin/AdminReports';

function RequireAuth({ children }) {
  const u = getAuth();
  return u ? children : <Navigate to="/login" replace />;
}
function RequireAdmin({ children }) {
  const u = getAuth();
  if (!u) return <Navigate to="/admin/login" replace />;
  return u.role === 'ADMIN' ? children : <Navigate to="/login" replace />;
}
function RequireUser({ children }) {
  const u = getAuth();
  if (!u) return <Navigate to="/login" replace />;
  return u.role === 'ADMIN' ? <Navigate to="/admin" replace /> : children;
}
function RedirectIfAuthed({ children, admin = false }) {
  const u = getAuth();
  if (!u) return children;
  if (admin && u.role === 'ADMIN') return <Navigate to="/admin" replace />;
  if (!admin && u.role !== 'ADMIN') return <Navigate to="/" replace />;
  return children;
}

export default function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* Auth */}
        <Route path="/login" element={<RedirectIfAuthed><Login mode="USER" /></RedirectIfAuthed>} />
        <Route path="/register" element={<RedirectIfAuthed><Register /></RedirectIfAuthed>} />
        <Route path="/admin/login" element={<RedirectIfAuthed admin={true}><Login mode="ADMIN" /></RedirectIfAuthed>} />

        {/* User area */}
        <Route path="/" element={<RequireUser><UserHome /></RequireUser>} />
        <Route path="/movies" element={<RequireUser><MoviesList /></RequireUser>} />
        <Route path="/movies/:id" element={<RequireUser><MovieDetail /></RequireUser>} />
        <Route path="/showtimes/:id/seatmap" element={<RequireUser><SeatMap /></RequireUser>} />
        <Route path="/checkout/:orderId" element={<RequireUser><Checkout /></RequireUser>} />
        <Route path="/tickets/:orderId" element={<RequireUser><OrderTickets /></RequireUser>} />

        {/* Admin area */}
        <Route path="/admin" element={<RequireAdmin><AdminLayout /></RequireAdmin>}>
          <Route index element={<AdminDashboard />} />
          <Route path="movies" element={<Movies />} />
          <Route path="cinemas" element={<Cinemas />} />
          <Route path="branches" element={<Branches />} />
          <Route path="rooms" element={<Rooms />} />
          <Route path="seats" element={<Seats />} />
          <Route path="showtimes" element={<Showtimes />} />
          <Route path="users" element={<Users />} />
          <Route path="orders" element={<Orders />} />
          <Route path="payments" element={<Payments />} />
          <Route path="tickets" element={<Tickets />} />
          <Route path="vouchers" element={<Vouchers />} />
          <Route path="reports" element={<Reports />} />
        </Route>

        {/* Fallback */}
        <Route path="*" element={<Navigate to="/login" replace />} />
      </Routes>
    </BrowserRouter>
  );
}

```

### src\main.jsx
```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

```

### src\components\AdminSidebar.jsx
```jsx
import { NavLink } from 'react-router-dom';

const items = [
  { to: '/admin', label: 'Tổng quan', end: true },
  { to: '/admin/movies', label: 'Quản lý phim' },
  { to: '/admin/cinemas', label: 'Quản lý rạp chiếu' },
  { to: '/admin/branches', label: 'Quản lý chi nhánh' },
  { to: '/admin/rooms', label: 'Quản lý phòng chiếu' },
  { to: '/admin/seats', label: 'Quản lý ghế' },
  { to: '/admin/showtimes', label: 'Quản lý suất chiếu' },
  { to: '/admin/users', label: 'Quản lý người dùng' },
  { to: '/admin/orders', label: 'Quản lý đơn hàng' },
  { to: '/admin/payments', label: 'Quản lý thanh toán' },
  { to: '/admin/tickets', label: 'Quản lý vé' },
  { to: '/admin/vouchers', label: 'Quản lý voucher' },
  { to: '/admin/reports', label: 'Báo cáo' },
];

export default function AdminSidebar() {
  return (
    <aside className="w-60 shrink-0 h-screen sticky top-0 bg-white border-r">
      <div className="px-4 py-4 border-b">
        <div className="text-lg font-semibold">Admin</div>
        <div className="text-xs text-gray-500">Movie Ticketing 2.0</div>
      </div>
      <nav className="p-2 space-y-1">
        {items.map(it => (
          <NavLink
            key={it.to}
            to={it.to}
            end={it.end}
            className={({ isActive }) =>
              `block px-3 py-2 rounded-lg text-sm ${isActive ? 'bg-gray-900 text-white' : 'text-gray-700 hover:bg-gray-100'}`
            }
          >
            {it.label}
          </NavLink>
        ))}
      </nav>
    </aside>
  );
}

```

### src\components\admin\BranchMovies.jsx
```jsx
// client/src/components/admin/BranchMovies.jsx
import { useEffect, useState } from "react";
const API = import.meta.env.VITE_API_BASE || "/api";

function roomLabel(r) {
  const name = r.name || r.roomName || r.room_name || `Room ${r.id}`;
  const fmt = r.formatType || r.format_type || '';
  const cap = r.capacity;
  return [name, fmt, cap ? `${cap} ghế` : ''].filter(Boolean).join(' • ');
}

export default function BranchMovies({ branchId }) {
  const [rooms, setRooms] = useState([]);

  useEffect(() => {
    if (!branchId) { setRooms([]); return; }
    fetch(`${API}/rooms?branchId=${branchId}&pageSize=500`)
      .then(r=>r.json())
      .then(d=>setRooms(Array.isArray(d.items)?d.items:Array.isArray(d)?d:[]))
      .catch(()=>setRooms([]));
  }, [branchId]);

  return (
    <div className="bg-white rounded-2xl shadow p-4">
      <h3 className="font-semibold mb-3">Phòng thuộc chi nhánh</h3>
      <div className="grid md:grid-cols-3 gap-3">
        {rooms.map(r=>(
          <div key={r.id} className="border rounded p-3 text-sm">
            <div className="font-medium">{roomLabel(r)}</div>
            <div className="text-gray-500">
              {(r.branchName || r.branch_name) ? (r.branchName || r.branch_name) : '—'}
              {r.city ? ` • ${r.city}` : ''}
            </div>
          </div>
        ))}
        {!rooms.length && <div className="text-gray-500 text-sm">Không có dữ liệu</div>}
      </div>
    </div>
  );
}

```

### src\components\admin\ExhibitorRoomsSeats.jsx
```jsx
// client/src/components/admin/ExhibitorRoomsSeats.jsx
import { useEffect, useMemo, useState } from "react";

const API = import.meta.env.VITE_API_BASE || "/api";

// Lấy nhãn phòng: tên • định dạng
function roomLabel(r) {
  const name = r.name || r.roomName || r.room_name || `Phòng ${r.id}`;
  const fmt = r.formatType || r.format_type || "";
  return [name, fmt].filter(Boolean).join(" • ");
}

// Ghép nhãn ghế: hàng + số cột (theo quản lý ghế)
function seatLabel(s) {
  const row =
    s.row_label ?? s.rowLabel ?? s.row ?? ""; // ưu tiên row_label
  const col =
    s.col_number ?? s.colNumber ?? s.number ?? s.no ?? ""; // ưu tiên col_number
  return `${row}${col}`;
}

export default function ExhibitorRoomsSeats({ exhibitorId }) {
  const [rooms, setRooms] = useState([]);
  const [pickRoom, setPickRoom] = useState(null);
  const [pickRoomObj, setPickRoomObj] = useState(null);
  const [seats, setSeats] = useState([]);

  // tải danh sách phòng theo exhibitor
  useEffect(() => {
    if (!exhibitorId) {
      setRooms([]);
      setPickRoom(null);
      setPickRoomObj(null);
      setSeats([]);
      return;
    }
    fetch(`${API}/rooms?exhibitorId=${exhibitorId}&pageSize=500`)
      .then((r) => r.json())
      .then((d) => {
        const items = Array.isArray(d?.items) ? d.items : Array.isArray(d) ? d : [];
        setRooms(items);
        if (items.length) {
          setPickRoom(items[0].id);
          setPickRoomObj(items[0]);
        } else {
          setPickRoom(null);
          setPickRoomObj(null);
        }
      })
      .catch(() => {
        setRooms([]);
        setPickRoom(null);
        setPickRoomObj(null);
      });
  }, [exhibitorId]);

  // tải ghế theo phòng chọn
  useEffect(() => {
    if (!pickRoom) {
      setSeats([]);
      return;
    }
    fetch(`${API}/rooms/${pickRoom}/seats`)
      .then((r) => r.json())
      .then((d) => (Array.isArray(d) ? setSeats(d) : setSeats([])))
      .catch(() => setSeats([]));
  }, [pickRoom]);

  // nhóm phòng theo chi nhánh để render
  const grouped = useMemo(() => {
    const g = new Map();
    for (const r of rooms) {
      const branchId = r.branchId || r.branch_id || 0;
      const branchName = r.branchName || r.branch_name || `Branch ${branchId}`;
      const city = r.city || "";
      const key = `${branchId}|${branchName}|${city}`;
      if (!g.has(key)) g.set(key, []);
      g.get(key).push(r);
    }
    return Array.from(g.entries()).map(([k, arr]) => {
      const [id, name, city] = k.split("|");
      return { branchId: Number(id), branchName: name, city, rooms: arr };
    });
  }, [rooms]);

  return (
    <div className="bg-white rounded-2xl shadow p-4 space-y-4">
      <h3 className="font-semibold">Phòng & Ghế theo Nhà phát hành</h3>

      {/* Danh sách phòng theo chi nhánh */}
      <div className="space-y-4">
        {grouped.map((b) => (
          <div key={b.branchId} className="border rounded p-3">
            <div className="font-medium">
              {b.branchName}
              {b.city ? ` • ${b.city}` : ""}
            </div>
            <div className="grid md:grid-cols-3 gap-3 mt-2">
              {b.rooms.map((r) => (
                <button
                  key={r.id}
                  className={`border rounded p-3 text-left ${
                    pickRoom === r.id ? "bg-black text-white" : ""
                  }`}
                  onClick={() => {
                    setPickRoom(r.id);
                    setPickRoomObj(r);
                  }}
                >
                  {roomLabel(r)}
                </button>
              ))}
            </div>
          </div>
        ))}
        {!grouped.length && (
          <div className="text-gray-500 text-sm">Không có dữ liệu</div>
        )}
      </div>

      {/* Bảng ghế */}
      <div>
        <h4 className="font-medium mb-2">
          Ghế của {pickRoomObj ? roomLabel(pickRoomObj) : "—"}
        </h4>
        <div className="grid grid-cols-10 gap-1">
          {seats.map((s) => (
            <div
              key={s.id}
              className={`text-center text-xs border rounded py-1 ${
                s.is_blocked ? "bg-red-200" : "bg-gray-50"
              }`}
              title={seatLabel(s)}
            >
              {seatLabel(s)}
            </div>
          ))}
          {!seats.length && (
            <div className="text-gray-500 text-sm col-span-10">
              Chọn phòng để xem ghế
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

```

### src\components\admin\MovieRelations.jsx
```jsx
import { useEffect, useMemo, useState } from "react";
const API = import.meta.env.VITE_API_BASE || "/api";

function toISOZ(localStr){ if(!localStr) return null; const d=new Date(localStr); return isNaN(d)?null:d.toISOString(); }

export default function MovieRelations({ movieId }) {
  const [fromLocal, setFromLocal] = useState("");
  const [toLocal, setToLocal] = useState("");
  const [status, setStatus] = useState("");

  const [showtimes, setShowtimes] = useState([]);
  const [tickets, setTickets] = useState([]);
  const [exhibitors, setExhibitors] = useState([]);
  const [loading, setLoading] = useState(false);

  const qs = useMemo(() => {
    const p = new URLSearchParams();
    const f = toISOZ(fromLocal); const t = toISOZ(toLocal);
    if (f) p.set("from", f); if (t) p.set("to", t);
    return p.toString();
  }, [fromLocal, toLocal]);

  useEffect(() => {
    if (!movieId) return;
    (async () => {
      setLoading(true);
      try {
        const [s, e] = await Promise.all([
          fetch(`${API}/movies/${movieId}/showtimes?${qs}`),
          fetch(`${API}/movies/${movieId}/exhibitors`)
        ]);
        setShowtimes(Array.isArray(await s.json()) ? await s.json() : []);
        const ej = await e.json();
        setExhibitors(Array.isArray(ej.items) ? ej.items : []);
      } finally { setLoading(false); }
    })();
  }, [movieId, qs]);

  useEffect(() => {
    if (!movieId) return;
    const p = new URLSearchParams();
    const f = toISOZ(fromLocal); const t = toISOZ(toLocal);
    if (f) p.set("from", f); if (t) p.set("to", t);
    if (status) p.set("status", status);
    fetch(`${API}/movies/${movieId}/tickets?${p.toString()}`)
      .then(r=>r.json()).then(d=>setTickets(Array.isArray(d)?d:[]))
      .catch(()=>setTickets([]));
  }, [movieId, fromLocal, toLocal, status]);

  return (
    <div className="mt-6 space-y-4">
      <div className="flex flex-wrap items-end gap-3">
        <div><label className="block text-xs text-gray-500">From</label>
          <input type="datetime-local" value={fromLocal} onChange={e=>setFromLocal(e.target.value)}
            className="border rounded px-2 py-1 text-sm w-56"/></div>
        <div><label className="block text-xs text-gray-500">To</label>
          <input type="datetime-local" value={toLocal} onChange={e=>setToLocal(e.target.value)}
            className="border rounded px-2 py-1 text-sm w-56"/></div>
        <div><label className="block text-xs text-gray-500">Ticket status</label>
          <select className="border rounded px-2 py-1 text-sm" value={status} onChange={e=>setStatus(e.target.value)}>
            <option value="">All</option><option value="ISSUED">ISSUED</option>
            <option value="SCANNED">SCANNED</option><option value="REFUNDED">REFUNDED</option>
            <option value="CANCELLED">CANCELLED</option>
          </select></div>
        {loading && <span className="text-sm text-gray-500">Đang tải…</span>}
      </div>

      <div className="grid md:grid-cols-2 gap-4">
        <section className="border rounded p-3">
          <h3 className="font-semibold mb-2">Suất chiếu</h3>
          <div className="max-h-72 overflow-auto divide-y">
            {showtimes.map(st=>(
              <div key={st.id} className="py-2 text-sm flex justify-between">
                <div><div className="font-medium">{st.room_name} • {st.format_type}</div>
                  <div className="text-gray-600">{st.branch_name} • {st.city}</div></div>
                <div className="text-right">
                  <div className="tabular-nums">{new Date(st.start_at).toISOString()}</div>
                  <div className="text-xs text-gray-500">{st.status}</div>
                </div>
              </div>
            ))}
            {!showtimes.length && <div className="text-sm text-gray-500">Không có dữ liệu</div>}
          </div>
        </section>

        <section className="border rounded p-3">
          <h3 className="font-semibold mb-2">Rạp phim đang chiếu</h3>
          {exhibitors.length ? (
            <ul className="space-y-2 text-sm">
              {exhibitors.map(x=>(
                <li key={x.id} className="flex justify-between">
                  <span className="font-medium">{x.name}</span>
                  <span className="text-gray-500">{x.branches} chi nhánh • {x.showtimes} suất</span>
                </li>
              ))}
            </ul>
          ) : <div className="text-sm text-gray-500">Không có dữ liệu</div>}
        </section>
      </div>

      <section className="border rounded p-3">
        <h3 className="font-semibold mb-2">Vé</h3>
        <div className="max-h-72 overflow-auto text-sm">
          <table className="w-full border-collapse">
            <thead><tr className="text-left border-b">
              <th className="py-1 pr-2">ID</th><th className="py-1 pr-2">Trạng thái</th>
              <th className="py-1 pr-2">Chi nhánh</th><th className="py-1 pr-2">Bắt đầu</th>
            </tr></thead>
            <tbody>
              {tickets.map(t=>(
                <tr key={t.id} className="border-b">
                  <td className="py-1 pr-2">{t.id}</td>
                  <td className="py-1 pr-2">{t.status}</td>
                  <td className="py-1 pr-2">{t.branch_name} • {t.city}</td>
                  <td className="py-1 pr-2 tabular-nums">{new Date(t.start_at).toISOString()}</td>
                </tr>
              ))}
              {!tickets.length && <tr><td colSpan={4} className="py-2 text-gray-500">Không có dữ liệu</td></tr>}
            </tbody>
          </table>
        </div>
      </section>
    </div>
  );
}

```

### src\layouts\AdminLayout.jsx
```jsx
import { Outlet, useNavigate } from 'react-router-dom';
import AdminSidebar from '../components/AdminSidebar';
import { getAuth, clearAuth } from '../lib/auth';

export default function AdminLayout() {
  const u = getAuth();
  const nav = useNavigate();

  return (
    <div className="min-h-screen flex bg-gray-50">
      <AdminSidebar />
      <div className="flex-1 min-w-0">
        <header className="bg-white border-b">
          <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
            <div className="text-base text-gray-600">Xin chào, <b>{u?.name}</b></div>
            <div className="flex items-center gap-3">
              <span className="text-sm text-gray-500">{u?.email}</span>
              <button
                onClick={()=>{ clearAuth(); nav('/admin/login'); }}
                className="px-3 py-1 rounded-lg border"
              >Đăng xuất</button>
            </div>
          </div>
        </header>
        <main className="max-w-6xl mx-auto px-4 py-6">
          <Outlet />
        </main>
      </div>
    </div>
  );
}

```

### src\pages\Checkout.jsx
```jsx
// client/src/pages/Checkout.jsx
import { useParams, useNavigate } from 'react-router-dom';
import { post } from '../lib/api';

export default function Checkout(){
  const { orderId } = useParams();
  const nav = useNavigate();
  const showtimeId = Number(sessionStorage.getItem(`order_showtime_${orderId}`) || 0);

  async function pay(){
    await post('/payments/sandbox/pay', { orderId: Number(orderId), showtimeId });
    nav(`/tickets/${orderId}`);
  }

  return (
    <div className="max-w-xl mx-auto p-6">
      <div className="bg-white rounded-2xl shadow p-6">
        <h1 className="text-xl font-semibold">Thanh toán</h1>
        <div className="mt-2 text-sm text-gray-600">Đơn hàng: #{orderId}</div>
        <button onClick={pay} className="mt-6 w-full py-2 rounded-lg bg-black text-white">Thanh toán sandbox</button>
      </div>
    </div>
  );
}

```

### src\pages\Login.jsx
```jsx
import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { post } from '../lib/api';
import { saveAuth } from '../lib/auth';

export default function Login({ mode }) { // 'USER' | 'ADMIN'
  const [email,setEmail]=useState('');
  const [password,setPassword]=useState('');
  const [err,setErr]=useState('');
  const nav = useNavigate();
  const title = mode==='ADMIN' ? 'Đăng nhập Admin' : 'Đăng nhập';

  async function onSubmit(e){
    e.preventDefault(); setErr('');
    try{
      const u = await post('/users/login', { email, password });
      if (mode==='ADMIN' && u.role!=='ADMIN') { setErr('Tài khoản không phải ADMIN'); return; }
      if (mode==='USER' && u.role==='ADMIN') { setErr('Dùng trang Admin để đăng nhập'); return; }
      saveAuth(u);
      nav(u.role==='ADMIN' ? '/admin' : '/');
    }catch(ex){ setErr(ex?.message || 'Lỗi'); }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
      <div className="w-full max-w-sm bg-white rounded-2xl shadow p-6">
        <h1 className="text-xl font-semibold mb-4">{title}</h1>
        {err && <div className="mb-3 text-sm text-red-600">{err}</div>}
        <form onSubmit={onSubmit} className="space-y-3">
          <input className="w-full border rounded-lg px-3 py-2" placeholder="Email"
            value={email} onChange={e=>setEmail(e.target.value)} />
          <input className="w-full border rounded-lg px-3 py-2" placeholder="Mật khẩu" type="password"
            value={password} onChange={e=>setPassword(e.target.value)} />
          <button className="w-full bg-black text-white rounded-lg py-2">Đăng nhập</button>
        </form>
        {mode!=='ADMIN' && (
          <div className="text-sm mt-4">
            Chưa có tài khoản? <Link className="text-blue-600" to="/register">Đăng ký</Link>
          </div>
        )}
      </div>
    </div>
  );
}

```

### src\pages\MovieDetail.jsx
```jsx
// client/src/pages/MovieDetail.jsx
import { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';

const API = import.meta.env.VITE_API_BASE || '/api';
const dayRangeUtc = (d) => {
  const start = new Date(d); start.setHours(0,0,0,0);
  const end   = new Date(d); end.setHours(23,59,59,999);
  return { from: start.toISOString(), to: end.toISOString() };
};
const toLocal = s => s ? new Date(s).toLocaleString('vi-VN', { hour12:false }) : '-';

export default function MovieDetail(){
  const { id } = useParams();
  const [m, setM]   = useState(null);
  const [sts, setSts] = useState([]);

  useEffect(()=>{ (async()=>{
    const mv = await fetch(`${API}/movies/${id}`).then(r=>r.json());
    setM(mv);

    const { from, to } = dayRangeUtc(new Date());
    const qs = new URLSearchParams({ movieId: id, from, to }).toString();
    const j = await fetch(`${API}/showtimes?`+qs).then(r=>r.json()).catch(()=>({items:[]}));
    setSts(j.items || []);
  })(); },[id]);

  if (!m) return null;
  return (
    <div className="max-w-5xl mx-auto p-6 space-y-4">
      <div className="bg-white rounded-2xl shadow p-5">
        <h1 className="text-2xl font-semibold">{m.title}</h1>
        {m.duration_min != null && (
          <div className="text-sm text-gray-600 mt-2">Thời lượng: {m.duration_min} phút</div>
        )}
        {m.overview && <p className="mt-3 text-gray-700">{m.overview}</p>}
      </div>
      <div className="bg-white rounded-2xl shadow p-5">
        <div className="font-semibold mb-3">Suất chiếu hôm nay</div>
        <div className="flex flex-wrap gap-2">
          {sts.map(s=>(
            <Link key={s.id} to={`/showtimes/${s.id}/seatmap`} className="px-3 py-2 rounded-lg border hover:bg-gray-50">
              {toLocal(s.start_at)}
            </Link>
          ))}
          {sts.length===0 && <div className="text-sm text-gray-600">Chưa có lịch.</div>}
        </div>
      </div>
    </div>
  );
}

```

### src\pages\Movies.jsx
```jsx
// client/src/pages/Movies.jsx
import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { get } from '../lib/api';

export default function Movies(){
  const [items,setItems]=useState([]);
  const [q,setQ]=useState('');
  const [loading,setLoading]=useState(false);

  async function load(){
    setLoading(true);
    const r = await get('/movies', q?{search:q}:{});
    setItems(r.items||[]);
    setLoading(false);
  }
  useEffect(()=>{ load(); },[]);

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-4">
      <div className="flex gap-2">
        <input className="border rounded-lg px-3 py-2 w-full" placeholder="Tìm phim…" value={q} onChange={e=>setQ(e.target.value)} />
        <button onClick={load} className="px-4 rounded-lg bg-black text-white">{loading?'...':'Tìm'}</button>
      </div>
      <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {items.map(m=>(
          <Link key={m.id} to={`/movies/${m.id}`} className="bg-white rounded-2xl shadow p-3 hover:ring-1 hover:ring-gray-200">
            <div className="font-medium">{m.title}</div>
            <div className="text-sm text-gray-600 mt-1">Thời lượng: {m.duration} phút</div>
          </Link>
        ))}
      </div>
    </div>
  );
}

```

### src\pages\Register.jsx
```jsx
import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { post } from '../lib/api';

export default function Register(){
  const [name,setName]=useState('');
  const [email,setEmail]=useState('');
  const [password,setPassword]=useState('');
  const [ok,setOk]=useState('');
  const [err,setErr]=useState('');
  const nav = useNavigate();

  async function onSubmit(e){
    e.preventDefault(); setErr(''); setOk('');
    try{
      await post('/users/register', { name, email, password });
      setOk('Đăng ký thành công. Hãy đăng nhập.');
      setTimeout(()=>nav('/login'), 500);
    }catch(ex){ setErr(ex?.message || 'Lỗi'); }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
      <div className="w-full max-w-sm bg-white rounded-2xl shadow p-6">
        <h1 className="text-xl font-semibold mb-4">Đăng ký</h1>
        {ok && <div className="mb-3 text-green-700 text-sm">{ok}</div>}
        {err && <div className="mb-3 text-red-600 text-sm">{err}</div>}
        <form onSubmit={onSubmit} className="space-y-3">
          <input className="w-full border rounded-lg px-3 py-2" placeholder="Họ tên"
            value={name} onChange={e=>setName(e.target.value)} />
          <input className="w-full border rounded-lg px-3 py-2" placeholder="Email"
            value={email} onChange={e=>setEmail(e.target.value)} />
          <input className="w-full border rounded-lg px-3 py-2" placeholder="Mật khẩu" type="password"
            value={password} onChange={e=>setPassword(e.target.value)} />
          <button className="w-full bg-black text-white rounded-lg py-2">Tạo tài khoản</button>
        </form>
        <div className="text-sm mt-4">
          Đã có tài khoản? <Link className="text-blue-600" to="/login">Đăng nhập</Link>
        </div>
      </div>
    </div>
  );
}

```

### src\pages\SeatMap.jsx
```jsx
// client/src/pages/SeatMap.jsx
import { useEffect, useMemo, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { get, post } from '../lib/api';
import { getAuth } from '../lib/auth';

const POLL_MS = 5000;

export default function SeatMap(){
  const { id } = useParams(); // showtimeId
  const nav = useNavigate();
  const user = useMemo(()=>getAuth(),[]);
  const [info,setInfo]=useState(null);
  const [seats,setSeats]=useState([]);
  const [picked,setPicked]=useState([]);
  const [loading,setLoading]=useState(false);
  const [err,setErr]=useState('');

  async function load(){
    try{
      const i = await get(`/showtimes/${id}`);
      setInfo(i);
      const s = await get(`/showtimes/${id}/seats`, { userId: user?.id });
      setSeats(s.seats || []);
    }catch(e){ setErr(e?.message||'Lỗi'); }
  }
  useEffect(()=>{ load(); const t=setInterval(load, POLL_MS); return ()=>clearInterval(t); },[id]);

  function toggleSeat(seatId, status){
    if (status!=='AVAILABLE' && status!=='HELD_BY_ME') return;
    setPicked(p=>{
      const has = p.includes(seatId);
      if (has) return p.filter(x=>x!==seatId);
      return [...p, seatId];
    });
  }

  async function holdAndOrder(){
    if (picked.length===0) return;
    setLoading(true); setErr('');
    try{
      await post('/holds', { showtimeId: Number(id), seatIds: picked, userId: user.id });
      const o = await post('/orders', { userId: user.id, showtimeId: Number(id), seatIds: picked });
      sessionStorage.setItem(`order_showtime_${o.id}`, String(id));
      nav(`/checkout/${o.id}`);
    }catch(e){ setErr(e?.message || 'Lỗi'); }
    finally{ setLoading(false); }
  }

  return (
    <div className="max-w-5xl mx-auto p-6 space-y-4">
      <div className="bg-white rounded-2xl shadow p-5">
        <div className="flex items-center justify-between">
          <div>
            <div className="text-lg font-semibold">Chọn ghế</div>
            {info && <div className="text-sm text-gray-600">{info.title} • {new Date(info.start_at).toLocaleString('vi-VN')}</div>}
          </div>
          <button onClick={holdAndOrder} disabled={loading || picked.length===0}
                  className="px-4 py-2 rounded-lg bg-black text-white disabled:opacity-50">
            {loading?'Đang xử lý…':`Tiếp tục (${picked.length})`}
          </button>
        </div>
        {err && <div className="mt-3 text-sm text-red-600">{err}</div>}

        <div className="mt-5 grid grid-cols-8 sm:grid-cols-12 gap-2">
          {seats.map(s=>(
            <button key={s.seatId}
              onClick={()=>toggleSeat(s.seatId, s.status)}
              className={
                `h-10 rounded-lg text-sm `
                + (picked.includes(s.seatId) ? 'bg-blue-600 text-white'
                : s.status==='AVAILABLE' || s.status==='HELD_BY_ME' ? 'bg-gray-100 hover:bg-gray-200'
                : s.status==='HELD' ? 'bg-yellow-200 cursor-not-allowed'
                : 'bg-red-300 cursor-not-allowed')
              }>
              {s.seatId}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}

```

### src\pages\Tickets.jsx
```jsx
// client/src/pages/Tickets.jsx
import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { get } from '../lib/api';

export default function Tickets(){
  const { orderId } = useParams();
  const [items,setItems]=useState([]);

  useEffect(()=>{ (async()=>{
    try{
      const r = await get('/tickets', { orderId });
      setItems(r.items || []);
    }catch{ setItems([]); }
  })(); },[orderId]);

  return (
    <div className="max-w-xl mx-auto p-6">
      <div className="bg-white rounded-2xl shadow p-6">
        <h1 className="text-xl font-semibold">Vé của bạn</h1>
        <div className="mt-3 space-y-2">
          {items.map(t=>(
            <div key={t.id} className="p-3 border rounded-lg">
              <div className="text-sm text-gray-600">Ghế: {t.seatId}</div>
              <div className="font-mono break-all">{t.qrCode}</div>
            </div>
          ))}
          {items.length===0 && <div className="text-sm text-gray-600">Chưa thấy vé. Nếu vừa thanh toán, thử tải lại sau.</div>}
        </div>
      </div>
    </div>
  );
}

```

### src\pages\UserHome.jsx
```jsx
import { useEffect, useState } from 'react';
import { getAuth, clearAuth } from '../lib/auth';
import { get } from '../lib/api';

export default function UserHome(){
  const u = getAuth();
  const [health, setHealth] = useState(null);
  const [err, setErr] = useState('');

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const h = await get('/health');
        if (mounted) setHealth(h);
      } catch (e) {
        if (mounted) setErr(e?.message || 'Lỗi');
      }
    })();
    return () => { mounted = false; };
  }, []);

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm">
        <div className="max-w-5xl mx-auto px-4 py-4 flex items-center justify-between">
          <h1 className="text-xl font-semibold">Trang chủ</h1>
          <div className="flex items-center gap-3">
            <span className="text-sm text-gray-600">{u?.email}</span>
            <button
              className="px-3 py-1 rounded-lg border"
              onClick={()=>{ clearAuth(); location.href='/login'; }}
            >Đăng xuất</button>
          </div>
        </div>
      </header>

      <main className="max-w-5xl mx-auto px-4 py-6 space-y-6">
        <section className="bg-white rounded-2xl shadow p-5">
          <div className="text-gray-600 text-sm">Xin chào</div>
          <div className="text-2xl font-semibold">{u?.name || 'User'}</div>
          <div className="mt-2 text-sm text-gray-600">Vai trò: <b>{u?.role}</b></div>
          {err && <div className="mt-3 text-sm text-red-600">Health error: {String(err)}</div>}
          {health && (
            <div className="mt-3 inline-flex items-center gap-2 text-sm">
              <span className={`w-2 h-2 rounded-full ${health.ok ? 'bg-green-500' : 'bg-red-500'}`}></span>
              <span>Hệ thống: {health.ok ? 'Sẵn sàng' : 'Sự cố'}</span>
            </div>
          )}
        </section>

        <section className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
          <a href="#" className="bg-white rounded-2xl shadow p-4 hover:ring-1 hover:ring-gray-200">
            <div className="font-medium">Đặt vé nhanh</div>
            <div className="text-sm text-gray-600 mt-1">Chọn suất chiếu và ghế (sẽ làm ở bước sau)</div>
          </a>
          <a href="#" className="bg-white rounded-2xl shadow p-4 hover:ring-1 hover:ring-gray-200">
            <div className="font-medium">Đơn hàng của tôi</div>
            <div className="text-sm text-gray-600 mt-1">Xem danh sách đơn đã tạo</div>
          </a>
          <a href="#" className="bg-white rounded-2xl shadow p-4 hover:ring-1 hover:ring-gray-200">
            <div className="font-medium">Vé của tôi</div>
            <div className="text-sm text-gray-600 mt-1">Xem mã QR đã phát hành</div>
          </a>
        </section>

        <section className="bg-white rounded-2xl shadow p-5">
          <div className="font-semibold mb-3">Thông báo</div>
          <div className="text-sm text-gray-600">Tính năng phim và suất chiếu sẽ được gắn sau khi kết nối TMDB và API showtimes.</div>
        </section>
      </main>
    </div>
  );
}

```

### src\pages\admin\AdminBranches.jsx
```jsx
// client/AdminBranches.jsx
import { useEffect, useState } from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import BranchMovies from '../../components/admin/BranchMovies.jsx';

const API = import.meta.env.VITE_API_BASE || '/api';

// Fix Leaflet icon
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
});

export default function AdminBranches() {
  const [exs, setExs] = useState([]);
  const [exFilter, setExFilter] = useState(0);
  const [list, setList] = useState([]);
  const [q, setQ] = useState('');
  const [f, setF] = useState({ exhibitorId:0, name:'', city:'', address:'', latitude:'', longitude:'', isActive:true });
  const [editId, setEditId] = useState(null);
  const [msg, setMsg] = useState('');

  const loadExs = async ()=> {
    const r = await fetch(`${API}/exhibitors?page=1&pageSize=500`);
    const d = await r.json(); setExs(d.items || []);
  };
  const load = async ()=> {
    const url = new URL(`${API}/branches`, location.origin);
    if (exFilter) url.searchParams.set('exhibitorId', exFilter);
    if (q) url.searchParams.set('search', q);
    url.searchParams.set('pageSize','500');
    const r = await fetch(url.toString().replace(location.origin,'')); const d = await r.json();
    setList(d.items || []);
  };
  useEffect(()=>{ loadExs().then(load); }, []);
  useEffect(()=>{ load(); }, [exFilter]);

  useEffect(() => {
    const timer = setTimeout(() => {
      const q = [f.address, f.city].filter(Boolean).join(', ');
      if (!q) return;
      fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(q)}`)
        .then(r => r.json())
        .then(d => {
          if (d[0]) {
            setF(prev => ({
              ...prev,
              latitude: parseFloat(d[0].lat).toFixed(6),
              longitude: parseFloat(d[0].lon).toFixed(6)
            }));
          }
        });
    }, 800);
    return () => clearTimeout(timer);
  }, [f.address, f.city]);

  const submit = async (e) => {
    e.preventDefault(); setMsg('');
    const body = {
      exhibitorId: Number(f.exhibitorId || 0),
      name: f.name, city: f.city, address: f.address || null,
      latitude: f.latitude!=='' ? Number(f.latitude) : null,
      longitude: f.longitude!=='' ? Number(f.longitude) : null,
      isActive: !!f.isActive
    };
    const method = editId ? 'PUT' : 'POST';
    const url = editId ? `${API}/branches/${editId}` : `${API}/branches`;
    const r = await fetch(url, { method, headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
    const d = await r.json(); if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    setMsg('OK'); setEditId(null);
    setF({ exhibitorId:0, name:'', city:'', address:'', latitude:'', longitude:'', isActive:true });
    load();
  };
  const pick = async (it) => {
    setEditId(it.id);
    setF({
      exhibitorId: it.exhibitorId, name: it.name, city: it.city || '',
      address: it.address || '', latitude: it.latitude ?? '', longitude: it.longitude ?? '', isActive: !!it.isActive
    });
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
  const del = async (id) => {
    if (!confirm('Xóa chi nhánh này?')) return;
    const r = await fetch(`${API}/branches/${id}`, { method:'DELETE' });
    const d = await r.json(); if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    setMsg('Đã xóa'); load();
  };

  const center = (f.latitude && f.longitude) ? [Number(f.latitude), Number(f.longitude)] : [21.0285, 105.8542];

  return (
    <section className="space-y-4">
      <h2 className="text-lg font-semibold">Chi nhánh</h2>
      <div className="flex gap-2">
        <select value={exFilter} onChange={e=>setExFilter(Number(e.target.value))} className="border rounded px-3 py-2">
          <option value={0}>Tất cả rạp chuỗi</option>
          {exs.map(x=> <option key={x.id} value={x.id}>{x.name}</option>)}
        </select>
        <form onSubmit={(e)=>{e.preventDefault(); load();}} className="flex gap-2 flex-1">
          <input value={q} onChange={e=>setQ(e.target.value)} placeholder="Tìm theo tên/địa chỉ/thành phố" className="border rounded px-3 py-2 w-full"/>
          <button className="px-4 rounded bg-black text-white">Tìm</button>
        </form>
      </div>

      <div className="overflow-x-auto pb-2">
        <div className="flex gap-3 min-w-[900px]">
          {list.map(it=>(
            <div key={it.id} className="w-72 flex-shrink-0 border rounded-lg p-3">
              <div className="text-base font-semibold">{it.name}</div>
              <div className="text-xs text-gray-600">Rạp: {exs.find(x=>x.id===it.exhibitorId)?.name || it.exhibitorId}</div>
              <div className="text-xs text-gray-600">{it.city}</div>
              <div className="text-xs break-all">{it.address || ''}</div>
              <div className="text-xs text-gray-500">Lat/Lng: {it.latitude ?? '—'} / {it.longitude ?? '—'}</div>
              <div className="text-xs">{it.isActive ? 'Đang hoạt động' : 'Tạm ngưng'}</div>
              {it.latitude != null && it.longitude != null && (
                <div className="mt-2">
                  <MapContainer center={[it.latitude, it.longitude]} zoom={13} style={{ height: '150px', width: '100%' }} scrollWheelZoom={false}>
                    <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution="© OpenStreetMap"/>
                    <Marker position={[it.latitude, it.longitude]}><Popup>{it.name}</Popup></Marker>
                  </MapContainer>
                </div>
              )}
              <div className="flex gap-2 mt-2">
                <button onClick={()=>pick(it)} className="px-2 py-1 rounded bg-blue-600 text-white text-xs">Sửa</button>
                <button onClick={()=>del(it.id)} className="px-2 py-1 rounded bg-red-600 text-white text-xs">Xóa</button>
              </div>
            </div>
          ))}
          {list.length===0 && <div className="text-sm text-gray-500 p-3">Chưa có dữ liệu.</div>}
        </div>
      </div>

      <form onSubmit={submit} className="grid md:grid-cols-6 gap-3 bg-white rounded-2xl shadow p-4">
        <select value={f.exhibitorId} onChange={e=>setF({...f,exhibitorId:Number(e.target.value)})} className="border rounded px-3 py-2" required>
          <option value={0}>-- Chọn rạp chuỗi --</option>
          {exs.map(x=> <option key={x.id} value={x.id}>{x.name}</option>)}
        </select>
        <input value={f.name} onChange={e=>setF({...f,name:e.target.value})} placeholder="Tên chi nhánh" className="border rounded px-3 py-2 md:col-span-2" required />
        <input value={f.city} onChange={e=>setF({...f,city:e.target.value})} placeholder="Thành phố/Tỉnh" className="border rounded px-3 py-2" required />
        <input value={f.address} onChange={e=>setF({...f,address:e.target.value})} placeholder="Địa chỉ" className="border rounded px-3 py-2 md:col-span-2" />
        <input value={f.latitude} onChange={e=>setF({...f,latitude:e.target.value})} placeholder="Latitude" className="border rounded px-3 py-2" />
        <input value={f.longitude} onChange={e=>setF({...f,longitude:e.target.value})} placeholder="Longitude" className="border rounded px-3 py-2" />
        <label className="flex items-center gap-2">
          <input type="checkbox" checked={f.isActive} onChange={e=>setF({...f,isActive:e.target.checked})}/>
          <span>Đang hoạt động</span>
        </label>
        <div className="md:col-span-6">
          <MapContainer
            center={center}
            zoom={13}
            style={{ height: '300px', width: '100%' }}
            scrollWheelZoom={true}
          >
            <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" attribution="© OpenStreetMap" />
            {f.latitude && f.longitude && (
              <Marker position={[f.latitude, f.longitude]}>
                <Popup>Chi nhánh đang nhập</Popup>
              </Marker>
            )}
          </MapContainer>
        </div>
        <div className="md:col-span-6 flex gap-2">
          <button className="px-4 rounded bg-black text-white">{editId?'Cập nhật':'Tạo mới'}</button>
          {editId && <button type="button" onClick={()=>{setEditId(null); setF({ exhibitorId:0, name:'', city:'', address:'', latitude:'', longitude:'', isActive:true });}} className="px-4 rounded bg-gray-200">Hủy</button>}
        </div>
      </form>
      {msg && <div className="text-sm text-emerald-700">{msg}</div>}

      {editId && (
        <div className="mt-6" id={`branch-${editId}`}>
          <BranchMovies branchId={editId} />
        </div>
      )}
    </section>
  );
}

```

### src\pages\admin\AdminCinemas.jsx
```jsx
// client/src/pages/admin/AdminCinemas.jsx
import { useEffect, useState } from 'react';
import ExhibitorRoomsSeats from '../../components/admin/ExhibitorRoomsSeats.jsx';

const API = import.meta.env.VITE_API_BASE || '/api';

export default function AdminCinemas() {
  const [list, setList] = useState([]);
  const [q, setQ] = useState('');
  const [f, setF] = useState({ name: '', code: '', website: '' });
  const [editId, setEditId] = useState(null);
  const [msg, setMsg] = useState('');
  const [movies, setMovies] = useState([]);

  async function load() {
    try {
      const params = new URLSearchParams();
      if (q) params.set('search', q);
      params.set('pageSize', '100');
      const r = await fetch(`${API}/exhibitors?${params.toString()}`);
      const d = await r.json().catch(() => ({}));
      setList(Array.isArray(d.items) ? d.items : Array.isArray(d) ? d : []);
    } catch {
      setList([]);
    }
  }
  useEffect(() => { load(); }, []); // lần đầu

  async function submit(e) {
    e.preventDefault();
    setMsg('');
    const body = {
      name: f.name.trim(),
      code: f.code?.trim() || null,
      website: f.website?.trim() || null,
    };
    const method = editId ? 'PUT' : 'POST';
    const url = editId ? `${API}/exhibitors/${editId}` : `${API}/exhibitors`;
    const r = await fetch(url, {
      method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });
    const d = await r.json().catch(() => ({}));
    if (!r.ok) return setMsg(d?.message || 'Lỗi');
    setMsg('OK');
    setEditId(null);
    setF({ name: '', code: '', website: '' });
    load();
  }

  function pick(it) {
    setEditId(it.id);
    setF({
      name: it.name || it.displayName || '',
      code: it.code || '',
      website: it.website || '',
    });
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  async function del(id) {
    if (!confirm('Xóa rạp chiếu này?')) return;
    const r = await fetch(`${API}/exhibitors/${id}`, { method: 'DELETE' });
    const d = await r.json().catch(() => ({}));
    if (!r.ok) return setMsg(d?.message || 'Lỗi');
    setMsg('Đã xóa');
    if (editId === id) setEditId(null);
    load();
  }

  // Phim đang chiếu của rạp đang chọn
  useEffect(() => {
    if (!editId) { setMovies([]); return; }
    fetch(`${API}/exhibitors/${editId}/movies`)
      .then(r => r.json())
      .then(d => {
        const items = Array.isArray(d.items) ? d.items : Array.isArray(d) ? d : [];
        setMovies(items.map(m => ({
          id: m.id,
          title: m.title || m.name,
          posterUrl: m.posterUrl || m.poster_url || '',
          showtimes: m.showtimes || m.showTimes || m.count || 0,
        })));
      })
      .catch(() => setMovies([]));
  }, [editId]);

  return (
    <section className="space-y-4">
      <h2 className="text-lg font-semibold">Rạp chiếu</h2>

      <form onSubmit={(e)=>{e.preventDefault(); load();}} className="flex gap-2">
        <input
          value={q}
          onChange={e=>setQ(e.target.value)}
          placeholder="Tìm theo tên/mã rạp"
          className="border rounded px-3 py-2 w-full"
        />
        <button className="px-4 rounded bg-black text-white">Tìm</button>
      </form>

      <div className="grid md:grid-cols-3 gap-3">
        {list.map(it => (
          <div key={it.id} className="border rounded-lg p-3">
            <div className="text-base font-semibold">{it.name || it.displayName || `Exhibitor ${it.id}`}</div>
            {(it.code || it.shortCode) && <div className="text-xs text-gray-600">Mã: {it.code || it.shortCode}</div>}
            {(it.website || it.url) && <div className="text-xs break-all">{it.website || it.url}</div>}
            <div className="flex gap-2 mt-2">
              <button onClick={() => pick(it)} className="px-2 py-1 rounded bg-blue-600 text-white text-xs">Sửa</button>
              <button onClick={() => del(it.id)} className="px-2 py-1 rounded bg-red-600 text-white text-xs">Xóa</button>
            </div>
          </div>
        ))}
        {list.length === 0 && <div className="text-sm text-gray-500 p-3">Chưa có dữ liệu.</div>}
      </div>

      <form onSubmit={submit} className="grid md:grid-cols-3 gap-3 bg-white rounded-2xl shadow p-4">
        <input
          value={f.name}
          onChange={e => setF({ ...f, name: e.target.value })}
          placeholder="Tên rạp"
          className="border rounded px-3 py-2"
          required
        />
        <input
          value={f.code}
          onChange={e => setF({ ...f, code: e.target.value })}
          placeholder="Mã rút gọn (VD: CGV)"
          className="border rounded px-3 py-2"
        />
        <input
          value={f.website}
          onChange={e => setF({ ...f, website: e.target.value })}
          placeholder="Website"
          className="border rounded px-3 py-2"
        />
        <div className="md:col-span-3 flex gap-2">
          <button className="px-4 rounded bg-black text-white">{editId ? 'Cập nhật' : 'Tạo mới'}</button>
          {editId && (
            <button
              type="button"
              onClick={() => { setEditId(null); setF({ name: '', code: '', website: '' }); }}
              className="px-4 rounded bg-gray-200"
            >
              Hủy
            </button>
          )}
        </div>
      </form>

      {msg && <div className="text-sm text-emerald-700">{msg}</div>}

      {/* Quản lý phòng + ghế + phim của rạp */}
      {editId && (
        <div className="mt-6 space-y-8">
          <ExhibitorRoomsSeats exhibitorId={editId} />

          <section className="border rounded p-4">
            <h3 className="font-semibold mb-2">Phim đang chiếu tại rạp</h3>
            {movies.length ? (
              <ul className="grid sm:grid-cols-2 md:grid-cols-3 gap-3 text-sm">
                {movies.map(m => (
                  <li key={m.id} className="border rounded p-3">
                    <div className="font-medium">{m.title}</div>
                    <div className="text-gray-500">{m.showtimes} suất chiếu</div>
                    {m.posterUrl && (
                      <img src={m.posterUrl} alt={m.title} className="mt-1 rounded h-28 object-cover" />
                    )}
                  </li>
                ))}
              </ul>
            ) : (
              <div className="text-sm text-gray-500">Không có phim đang chiếu tại rạp này.</div>
            )}
          </section>
        </div>
      )}
    </section>
  );
}

```

### src\pages\admin\AdminDashboard.jsx
```jsx
import { useEffect, useMemo, useState } from 'react';

const API = import.meta.env.VITE_API_BASE || '/api';
const toISOStart = d => new Date(`${d}T00:00:00.000Z`).toISOString();
const toISOEnd   = d => new Date(`${d}T23:59:59.999Z`).toISOString();
const money = n => (Number(n||0)).toLocaleString('vi-VN') + ' ₫';

async function getJson(url){
  const r = await fetch(url);
  const ct = r.headers.get('content-type') || '';
  const t = await r.text();
  if (!ct.includes('application/json')) throw new Error(`${r.status} ${r.statusText}`);
  const d = JSON.parse(t);
  if (!r.ok) throw new Error(d?.message || `HTTP ${r.status}`);
  return d;
}

/* ===== util: build dãy ngày và đổ 0 ===== */
const pad = n => String(n).padStart(2,'0');
const dstr = d => `${d.getUTCFullYear()}-${pad(d.getUTCMonth()+1)}-${pad(d.getUTCDate())}`;
function daysBetween(from, to){
  const a=new Date(`${from}T00:00:00Z`), b=new Date(`${to}T00:00:00Z`);
  const out=[]; for(let d=new Date(a); d<=b; d.setUTCDate(d.getUTCDate()+1)) out.push(dstr(d));
  return out;
}
function fillDaily(from, to, rows){
  const map=new Map(rows.map(x=>[x.date,x]));
  return daysBetween(from,to).map(d=>({
    date:d,
    gross:Number(map.get(d)?.gross||0),
    refund:Number(map.get(d)?.refund||0),
    net:Number(map.get(d)?.net||0),
    tickets:Number(map.get(d)?.tickets||0),
    orders:Number(map.get(d)?.orders||0),
  }));
}

/* ===== Charts (SVG), luôn vẽ kể cả toàn 0 ===== */
function LineChart({ data, xKey='date', yKey='value', title }) {
  const H=220, W=Math.max(360,(data?.length||0)*50||360), P=30;
  const xs=(data||[]).map(d=>d[xKey]); const ys=(data||[]).map(d=>Number(d[yKey]||0));
  const max=Math.max(...ys,1);
  const X=i=>P+i*(W-2*P)/Math.max(1,(xs.length||1)-1||1);
  const Y=v=>(H-P)-(v/max)*(H-2*P);
  const path=(ys.length?ys:[0,0]).map((v,i)=>`${i?'L':'M'} ${X(i)} ${Y(v)}`).join(' ');
  return (
    <svg viewBox={`0 0 ${W} ${H}`} className="w-full">
      <rect x="0" y="0" width={W} height={H} rx="12" className="fill-white stroke-gray-200" />
      <path d={path} className="stroke-sky-600 fill-none" strokeWidth="2"/>
      {ys.map((v,i)=>(<circle key={i} cx={X(i)} cy={Y(v)} r="2.5" className="fill-sky-600" />))}
      {(xs.length?xs:['', '']).map((d,i)=>(
        <text key={i} x={X(i)} y={H-6} textAnchor="middle" className="text-[10px] fill-gray-600">
          {String(d).slice(5)}
        </text>
      ))}
      {!data?.length && <text x={W/2} y={H/2} textAnchor="middle" className="text-xs fill-gray-500">Không có dữ liệu {title}</text>}
    </svg>
  );
}
function BarChart({ data, xKey='label', yKey='value', title }) {
  const H=220, bar=28, gap=16, n=(data?.length||0)||5, W=n*(bar+gap)+gap;
  const rows=data?.length?data:Array.from({length:n},()=>({[xKey]:'-',[yKey]:0}));
  const max=Math.max(...rows.map(d=>Number(d[yKey]||0)),1);
  return (
    <svg viewBox={`0 0 ${W} ${H}`} className="w-full">
      <rect x="0" y="0" width={W} height={H} rx="12" className="fill-white stroke-gray-200" />
      {rows.map((d,i)=>{
        const v=Number(d[yKey]||0);
        const h=Math.round((v/max)*(H-40));
        const x=gap+i*(bar+gap), y=H-20-h;
        return (
          <g key={i}>
            <rect x={x} y={y} width={bar} height={h} rx="6" className="fill-sky-600" />
            <text x={x+bar/2} y={H-6} textAnchor="middle" className="text-[10px] fill-gray-600">
              {String(d[xKey]).slice(5)}
            </text>
          </g>
        );
      })}
      {!data?.length && <text x={W/2} y={H/2} textAnchor="middle" className="text-xs fill-gray-500">Không có dữ liệu {title}</text>}
    </svg>
  );
}

/* ===== KPI ===== */
function Kpi({ label, value, sub }) {
  return (
    <div className="bg-white rounded-2xl shadow p-4">
      <div className="text-xs text-gray-500">{label}</div>
      <div className="mt-1 text-2xl font-semibold">{value}</div>
      {sub && <div className="mt-1 text-xs text-gray-500">{sub}</div>}
    </div>
  );
}

export default function AdminDashboard(){
  const today = new Date().toISOString().slice(0,10);
  const weekAgo = new Date(Date.now()-6*864e5).toISOString().slice(0,10);

  const [from,setFrom]=useState(weekAgo);
  const [to,setTo]=useState(today);
  const [loading,setLoading]=useState(false);
  const [err,setErr]=useState('');

  const [sum,setSum]=useState(null);
  const [daily,setDaily]=useState([]);

  const netSeries = useMemo(()=> daily.map(d=>({date:d.date, value:d.net})),[daily]);
  const grossBars = useMemo(()=> daily.map(d=>({label:d.date, value:d.gross})),[daily]);

  const load = async ()=>{
    setErr(''); setLoading(true);
    try{
      const [s,d] = await Promise.all([
        getJson(`${API}/reports/summary?from=${encodeURIComponent(toISOStart(from))}&to=${encodeURIComponent(toISOEnd(to))}`),
        getJson(`${API}/reports/daily?from=${encodeURIComponent(toISOStart(from))}&to=${encodeURIComponent(toISOEnd(to))}`)
      ]);
      setSum(s);
      setDaily(fillDaily(from,to,d||[]));
    }catch(e){
      setErr(e.message);
      setSum(null);
      setDaily(fillDaily(from,to,[]));
    } finally { setLoading(false); }
  };
  useEffect(()=>{ load(); /* eslint-disable-next-line */ },[]);

  const setQuick = days => {
    const t=new Date(); const f=new Date(); f.setDate(t.getDate()-(days-1));
    setFrom(f.toISOString().slice(0,10)); setTo(t.toISOString().slice(0,10));
  };

  return (
    <section className="space-y-5">
      {/* Header + filters */}
      <div className="bg-white rounded-2xl shadow p-5">
        <div className="flex items-end gap-3 flex-wrap">
          <div className="mr-auto">
            <h2 className="text-xl font-semibold">Dashboard</h2>
            <div className="text-xs text-gray-500">Tổng quan doanh thu và vé theo ngày</div>
          </div>
          <div>
            <label className="block text-xs text-gray-600 mb-1">Từ</label>
            <input type="date" value={from} onChange={e=>setFrom(e.target.value)} className="border rounded px-3 py-2"/>
          </div>
          <div>
            <label className="block text-xs text-gray-600 mb-1">Đến</label>
            <input type="date" value={to} onChange={e=>setTo(e.target.value)} className="border rounded px-3 py-2"/>
          </div>
          <button onClick={load} disabled={loading} className="h-[38px] px-4 rounded bg-black text-white">
            {loading?'Đang tải…':'Tải'}
          </button>
        </div>
        <div className="flex gap-2 mt-2">
          <button onClick={()=>setQuick(7)} className="text-xs px-2 py-1 rounded border">7 ngày</button>
          <button onClick={()=>setQuick(30)} className="text-xs px-2 py-1 rounded border">30 ngày</button>
          <button onClick={()=>setQuick(90)} className="text-xs px-2 py-1 rounded border">90 ngày</button>
        </div>
        {err && <div className="mt-2 text-sm text-rose-600 break-words">{err}</div>}
      </div>

      {/* KPIs */}
      <div className="grid md:grid-cols-2 xl:grid-cols-4 gap-4">
        <Kpi label="Doanh thu gộp" value={money(sum?.gross_revenue||0)} />
        <Kpi label="Hoàn tiền" value={money(sum?.refund_total||0)} />
        <Kpi label="Doanh thu ròng" value={money(sum?.net_revenue||0)} />
        <Kpi label="Vé đã bán" value={(sum?.tickets_sold||0).toLocaleString('vi-VN')}
             sub={`Đơn đã thanh toán: ${(sum?.orders_count||0).toLocaleString('vi-VN')}`} />
      </div>

      {/* Charts */}
      <div className="grid xl:grid-cols-2 gap-4">
        <div className="bg-white rounded-2xl shadow p-4">
          <h3 className="font-medium mb-2">Doanh thu gộp theo ngày</h3>
          <BarChart data={grossBars} title="doanh thu gộp" />
        </div>
        <div className="bg-white rounded-2xl shadow p-4">
          <h3 className="font-medium mb-2">Doanh thu ròng theo ngày</h3>
          <LineChart data={netSeries} title="doanh thu ròng" />
        </div>
      </div>
    </section>
  );
}

```

### src\pages\admin\AdminMovies.jsx
```jsx
import { useEffect, useMemo, useState } from 'react';

const API = import.meta.env.VITE_API_BASE || '/api';
const IMG_BASE = import.meta.env.VITE_TMDB_IMAGE_BASE_URL || 'https://image.tmdb.org/t/p/original';

// ===== helpers thời gian (LOCAL -> input "datetime-local") =====
function pad(n){ return String(n).padStart(2,'0'); }
function toInputLocal(d){
  const yy = d.getFullYear();
  const mm = pad(d.getMonth()+1);
  const dd = pad(d.getDate());
  const hh = pad(d.getHours());
  const mi = pad(d.getMinutes());
  return `${yy}-${mm}-${dd}T${hh}:${mi}`;
}
function localDayRangeForInput(base=new Date()){
  const s = new Date(base.getFullYear(), base.getMonth(), base.getDate(), 0,0,0,0);
  const e = new Date(base.getFullYear(), base.getMonth(), base.getDate(), 23,59,59,999);
  return { fromIn: toInputLocal(s), toIn: toInputLocal(e) };
}
const toLocalText = (s) => s ? new Date(s.replace(' ','T') + 'Z').toLocaleString('vi-VN', { hour12:false }) : '-';
// (ở API trả về 'YYYY-MM-DD HH:mm:ss' UTC, add 'Z' để hiển thị đúng giờ địa phương)

export default function AdminMovies() {
  // DB
  const [list, setList] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [detail, setDetail] = useState(null);

  // Liên kết: showtimes + exhibitors
  const [fromIn, setFromIn] = useState('');   // 'yyyy-MM-ddTHH:mm' (LOCAL)
  const [toIn, setToIn] = useState('');
  const [showtimes, setShowtimes] = useState([]);
  const [exhibitors, setExhibitors] = useState([]);

  const applyRangeDefaultToday = () => {
    const { fromIn, toIn } = localDayRangeForInput(new Date());
    setFromIn(fromIn);
    setToIn(toIn);
  };

  // TMDB
  const [cat, setCat] = useState('now_playing');
  const [page, setPage] = useState(1);
  const [feed, setFeed] = useState([]);
  const [hasMore, setHasMore] = useState(true);

  const [q, setQ] = useState('');
  const [tmdbList, setTmdbList] = useState([]);
  const [tmdbPick, setTmdbPick] = useState(null);

  const [loading, setLoading] = useState(false);
  const [msg, setMsg] = useState('');

  // ===== DB =====
  const loadDB = async () => {
    try {
      const r = await fetch(`${API}/movies?page=1&pageSize=500`);
      const d = await r.json();
      setList(d.items || []);
    } catch {
      setMsg('Không lấy được danh sách phim trong hệ thống');
    }
  };
  useEffect(() => { loadDB(); applyRangeDefaultToday(); }, []);

  const pickDB = async (id) => {
    setEditingId(id);
    const r = await fetch(`${API}/movies/${id}`);
    const d = await r.json();
    if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    setDetail(d);
    await loadRelations(id, fromIn, toIn);
  };

  const saveDB = async (patch) => {
    if (!editingId) return;
    const r = await fetch(`${API}/movies/${editingId}`, {
      method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(patch)
    });
    const d = await r.json();
    if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    setMsg('Đã cập nhật'); await loadDB(); await pickDB(editingId);
  };
  const delDB = async (id) => {
    if (!confirm('Xóa phim này?')) return;
    const r = await fetch(`${API}/movies/${id}`, { method: 'DELETE' });
    const d = await r.json();
    if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    if (editingId === id) { setEditingId(null); setDetail(null); }
    setMsg('Đã xóa'); await loadDB();
  };

  // ===== RELATIONS (showtimes + exhibitors) =====
  async function loadRelations(movieId, fromInput, toInput) {
    if (!movieId) return;

    // GỬI NGUYÊN 'datetime-local' (LOCAL). BE sẽ quy đổi -> UTC/MySQL.
    const qs = new URLSearchParams({ from: fromInput, to: toInput }).toString();

    const st = await fetch(`${API}/movies/${movieId}/showtimes?` + qs)
      .then(r => r.json()).catch(() => ({ items: [] }));
    setShowtimes(st.items || []);

    const ex = await fetch(`${API}/movies/${movieId}/exhibitors?` + qs)
      .then(r => r.json()).catch(() => ({ items: [] }));
    setExhibitors(ex.items || []);
  }

  const applyRange = async () => {
    if (!editingId) return;
    if (!fromIn || !toIn) applyRangeDefaultToday();
    await loadRelations(editingId, fromIn, toIn);
  };

  // ===== TMDB: catalog feed =====
  const loadFeed = async (reset = false) => {
    setLoading(true);
    try {
      const p = reset ? 1 : page;
      const r = await fetch(`${API}/tmdb/list?cat=${cat}&page=${p}`);
      const d = await r.json();
      const items = d.items || [];
      setFeed(reset ? items : [...feed, ...items]);
      setPage((reset ? 1 : page) + 1);
      setHasMore((d.totalPages || 1) >= (reset ? 2 : page + 1));
    } finally { setLoading(false); }
  };
  useEffect(() => { setPage(1); setHasMore(true); setFeed([]); loadFeed(true); }, [cat]);

  // ===== TMDB: search + detail + import =====
  const searchTMDB = async (e) => {
    e.preventDefault();
    setLoading(true); setMsg('');
    try {
      const r = await fetch(`${API}/tmdb/search?query=${encodeURIComponent(q)}`);
      const d = await r.json();
      setTmdbList(d.items || []);
    } finally { setLoading(false); }
  };
  const openTMDB = async (tmdbId) => {
    setLoading(true); setMsg('');
    try {
      const r = await fetch(`${API}/tmdb/movie/${tmdbId}`);
      const d = await r.json();
      if (!r.ok) throw new Error(d?.message || 'TMDB lỗi');
      setTmdbPick(d);
    } catch (e) { setMsg(String(e.message || e)); }
    finally { setLoading(false); }
  };
  const importTMDB = async (tmdbId) => {
    setLoading(true); setMsg('');
    try {
      const r = await fetch(`${API}/tmdb/import/${tmdbId}`, { method: 'POST' });
      const d = await r.json();
      if (!r.ok) throw new Error(d?.message || 'Import lỗi');
      setMsg('Đã import'); await loadDB();
    } catch (e) { setMsg(String(e.message || e)); }
    finally { setLoading(false); }
  };

  const trailerEmbed = useMemo(() => {
    if (!tmdbPick?.trailer || tmdbPick.trailer.site !== 'YouTube') return null;
    return `https://www.youtube.com/embed/${tmdbPick.trailer.key}`;
  }, [tmdbPick]);

  return (
    <section className="space-y-6">
      <h2 className="text-lg font-semibold">Quản lý phim</h2>
      {msg && <div className="text-sm text-emerald-700">{msg}</div>}

      {/* 1) Danh sách trong hệ thống */}
      <div className="bg-white rounded-2xl shadow p-4">
        <h3 className="font-medium mb-3">Trong hệ thống</h3>
        <div className="overflow-x-auto pb-2">
          <div className="flex gap-3 min-w-[720px]">
            {list.map(m => (
              <div key={m.id} className="w-44 flex-shrink-0 border rounded-lg overflow-hidden">
                {m.posterUrl
                  ? <img src={m.posterUrl} alt="" className="w-44 h-64 object-cover" />
                  : <div className="w-44 h-64 flex items-center justify-center text-xs text-gray-500">No poster</div>}
                <div className="p-2 text-sm">
                  <div className="font-medium line-clamp-2">{m.title}</div>
                  <div className="text-gray-500">{m.durationMin} phút</div>
                  <div className="flex gap-2 mt-2">
                    <button onClick={() => pickDB(m.id)} className="px-2 py-1 rounded bg-blue-600 text-white text-xs">Sửa</button>
                    <button onClick={() => delDB(m.id)} className="px-2 py-1 rounded bg-red-600 text-white text-xs">Xóa</button>
                  </div>
                </div>
              </div>
            ))}
            {list.length === 0 && <div className="text-sm text-gray-500 p-3">Chưa có dữ liệu.</div>}
          </div>
        </div>

        {detail && (
          <div className="mt-4 grid md:grid-cols-5 gap-3">
            <div className="md:col-span-2">
              {detail.posterUrl && <img src={detail.posterUrl} alt="" className="w-full rounded-lg" />}
            </div>
            <div className="md:col-span-3 space-y-3">
              <div className="text-xl font-semibold">{detail.title}</div>
              <div className="text-sm text-gray-600">{detail.releaseDate || ''}</div>
              <div className="text-sm text-gray-600">Độ tuổi: {detail.ratingAge || 'N/A'}</div>
              <textarea
                className="w-full border rounded px-3 py-2"
                rows={4}
                value={detail.description || ''}
                onChange={(e) => setDetail({ ...detail, description: e.target.value })}
                placeholder="Mô tả"
              />
              <div className="flex gap-2">
                <button className="px-4 py-2 rounded bg-black text-white" onClick={() => saveDB({ description: detail.description })}>Lưu</button>
                <button className="px-4 py-2 rounded bg-gray-200" onClick={() => { setEditingId(null); setDetail(null); }}>Đóng</button>
              </div>

              {/* Bộ lọc thời gian và danh sách liên kết */}
              <div className="mt-3 p-3 border rounded-xl">
                <div className="flex items-end gap-3">
                  <label className="text-sm">From
                    <input type="datetime-local" className="border rounded px-2 py-1 ml-2"
                      value={fromIn}
                      onChange={(e) => setFromIn(e.target.value)} />
                  </label>
                  <label className="text-sm">To
                    <input type="datetime-local" className="border rounded px-2 py-1 ml-2"
                      value={toIn}
                      onChange={(e) => setToIn(e.target.value)} />
                  </label>
                  <button onClick={applyRange} className="h-9 px-4 rounded bg-black text-white">Lọc</button>
                  <button onClick={() => { applyRangeDefaultToday(); applyRange(); }} className="h-9 px-3 rounded bg-gray-200">Hôm nay</button>
                </div>

                <div className="grid md:grid-cols-2 gap-4 mt-3">
                  <div className="border rounded-lg p-2">
                    <div className="font-semibold mb-2">Suất chiếu</div>
                    {showtimes.length === 0 && <div className="text-sm text-gray-500">Không có dữ liệu</div>}
                    <ul className="space-y-1 text-sm">
                      {showtimes.map(s => (
                        <li key={s.id}>#{s.id} • {s.room_name || 'Phòng ?'} • {toLocalText(s.start_at)}</li>
                      ))}
                    </ul>
                  </div>
                  <div className="border rounded-lg p-2">
                    <div className="font-semibold mb-2">Rạp phim đang chiếu</div>
                    {exhibitors.length === 0 && <div className="text-sm text-gray-500">Không có dữ liệu</div>}
                    <ul className="space-y-1 text-sm">
                      {exhibitors.map(x => (
                        <li key={`${x.exhibitorId}-${x.branchId}`}>
                          {x.exhibitorName} • {x.branchName} • {x.city} • {x.showtimes} suất
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* 2) Danh mục TMDB */}
      <div className="bg-white rounded-2xl shadow p-4">
        <div className="flex items-center justify-between mb-3">
          <h3 className="font-medium">Danh mục TMDB</h3>
          <div className="flex gap-2 text-sm">
            {['now_playing', 'popular', 'top_rated', 'upcoming'].map(k => (
              <button
                key={k}
                onClick={() => { setCat(k); }}
                className={`px-3 py-1 rounded ${cat === k ? 'bg-black text-white' : 'bg-gray-200'}`}
              >
                {k.replace('_', ' ')}
              </button>
            ))}
          </div>
        </div>

        <div className="overflow-x-auto pb-2">
          <div className="flex gap-3 min-w-[720px]">
            {feed.map(t => (
              <div key={t.tmdbId} className="w-44 flex-shrink-0 border rounded-lg overflow-hidden cursor-pointer">
                {t.posterPath
                  ? <img src={`${IMG_BASE}${t.posterPath}`} className="w-44 h-64 object-cover" alt="" />
                  : <div className="w-44 h-64 flex items-center justify-center text-xs text-gray-500">No poster</div>}
                <div className="p-2 text-sm">
                  <div className="font-medium line-clamp-2">{t.title}</div>
                  <div className="text-xs text-gray-500">{t.releaseDate || ''}</div>
                  <div className="text-xs">★ {t.voteAverage ?? '-'}</div>
                  <div className="flex gap-2 mt-2">
                    <button onClick={() => openTMDB(t.tmdbId)} className="px-2 py-1 rounded bg-blue-600 text-white text-xs">Chi tiết</button>
                    <button onClick={() => importTMDB(t.tmdbId)} className="px-2 py-1 rounded bg-emerald-600 text-white text-xs">Import</button>
                  </div>
                </div>
              </div>
            ))}
            {feed.length === 0 && <div className="text-sm text-gray-500 p-3">Không có dữ liệu.</div>}
          </div>
        </div>
        {hasMore && (
          <div className="mt-3">
            <button onClick={() => loadFeed(false)} className="px-4 py-2 rounded bg-gray-100 border">Tải thêm</button>
          </div>
        )}
      </div>

      {/* 3) Tìm kiếm TMDB */}
      <div className="bg-white rounded-2xl shadow p-4">
        <h3 className="font-medium mb-2">Tìm trên TMDB</h3>
        <form onSubmit={searchTMDB} className="flex gap-2 mb-3">
          <input value={q} onChange={e => setQ(e.target.value)} placeholder="Từ khóa TMDB"
            className="border rounded px-3 py-2 w-full" />
          <button className="px-4 rounded bg-black text-white" disabled={loading}>Tìm</button>
        </form>

        <div className="overflow-x-auto mb-4">
          <div className="flex gap-3 min-w-[720px]">
            {tmdbList.map(t => (
              <div key={t.tmdbId} className="w-44 flex-shrink-0 border rounded-lg overflow-hidden">
                {t.posterPath
                  ? <img src={`${IMG_BASE}${t.posterPath}`} className="w-44 h-64 object-cover" alt="" />
                  : <div className="w-44 h-64 flex items-center justify-center text-xs text-gray-500">No poster</div>}
                <div className="p-2 text-sm">
                  <div className="font-medium line-clamp-2">{t.title}</div>
                  <div className="text-xs text-gray-500">{t.releaseDate || ''}</div>
                  <div className="text-xs">★ {t.voteAverage ?? '-'}</div>
                  <div className="flex gap-2 mt-2">
                    <button onClick={() => openTMDB(t.tmdbId)} className="px-2 py-1 rounded bg-blue-600 text-white text-xs">Chi tiết</button>
                    <button onClick={() => importTMDB(t.tmdbId)} className="px-2 py-1 rounded bg-emerald-600 text-white text-xs">Import</button>
                  </div>
                </div>
              </div>
            ))}
            {tmdbList.length === 0 && <div className="text-sm text-gray-500 p-3">Chưa có kết quả.</div>}
          </div>
        </div>

        {tmdbPick && (
          <div className="grid md:grid-cols-5 gap-4">
            <div className="space-y-3 md:col-span-2">
              {tmdbPick.posterPath && <img src={`${IMG_BASE}${tmdbPick.posterPath}`} className="w-full rounded-lg" alt="" />}
              {tmdbPick.backdropPath && <img src={`${IMG_BASE}${tmdbPick.backdropPath}`} className="w-full rounded-lg" alt="" />}
            </div>
            <div className="space-y-3 md:col-span-3">
              <div className="text-2xl font-semibold">{tmdbPick.title}</div>
              <div className="text-sm text-gray-600">{tmdbPick.releaseDate} • {tmdbPick.runtime} phút</div>
              <div className="text-sm">★ {tmdbPick.voteAverage ?? '-'} ({tmdbPick.voteCount ?? 0}) • {tmdbPick.ratingAge || 'N/A'}</div>
              <p className="text-sm whitespace-pre-wrap">{tmdbPick.overview || '(Không có mô tả)'}</p>
              {trailerEmbed && (
                <div className="aspect-video">
                  <iframe className="w-full h-full rounded-lg" src={trailerEmbed} title="Trailer" allowFullScreen />
                </div>
              )}
              <div className="flex gap-2">
                <button onClick={() => importTMDB(tmdbPick.tmdbId)} className="px-4 py-2 rounded bg-emerald-600 text-white" disabled={loading}>
                  Import vào hệ thống
                </button>
                <button onClick={() => setTmdbPick(null)} className="px-4 py-2 rounded bg-gray-200">Đóng</button>
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
}

```

### src\pages\admin\AdminOrders.jsx
```jsx
import { useEffect, useState, useCallback } from 'react';
const API = import.meta.env.VITE_API_BASE || '/api';

export default function AdminOrders() {
  const [q, setQ] = useState('');
  const [status, setStatus] = useState('');
  const [list, setList] = useState([]);
  const [page, setPage] = useState(1);
  const [pageSize] = useState(50);
  const [total, setTotal] = useState(0);
  const [msg, setMsg] = useState('');
  const [openId, setOpenId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [details, setDetails] = useState({});          // { [orderId]: detail }
  const [detailLoading, setDetailLoading] = useState(0); // orderId đang tải

  const load = useCallback(async (p = 1) => {
    setLoading(true);
    setMsg('');
    setList([]);
    const qs = new URLSearchParams({ page: String(p), pageSize: String(pageSize) });
    if (q) qs.set('q', q);
    if (status) qs.set('status', status);
    try {
      const r = await fetch(`${API}/orders?` + qs.toString());
      const d = await r.json();
      if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
      setList(d.items || []);
      setTotal(Number(d.total || 0));
      setPage(Number(d.page || p));
    } catch (e) {
      setMsg(String(e));
    } finally {
      setLoading(false);
    }
  }, [q, status, pageSize]);

  useEffect(() => { load(1); }, [load]);

  const onKey = e => { if (e.key === 'Enter') load(1); };

  async function toggleView(id){
    setMsg('');
    if (openId === id) { setOpenId(null); return; }
    setOpenId(id);
    if (details[id]) return; // đã cache
    setDetailLoading(id);
    const r = await fetch(`${API}/orders/${id}`);
    const d = await r.json();
    setDetailLoading(0);
    if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    setDetails(prev => ({ ...prev, [id]: d }));
  }

  async function cancelOrder(id){
    if (!confirm('Hủy đơn PENDING?')) return;
    setMsg('');
    const r = await fetch(`${API}/orders/${id}/cancel`, { method:'PATCH' });
    const d = await r.json();
    if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    setOpenId(null);
    load(page);
  }

  async function refundOrder(id){
    if (!confirm('Hoàn tiền đơn PAID theo rule (> 2h)?')) return;
    setMsg('');
    const r = await fetch(`${API}/orders/${id}/refund`, { method:'POST' });
    const d = await r.json();
    if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    setOpenId(null);
    load(page);
  }

  const pages = Math.max(1, Math.ceil(total / pageSize));

  return (
    <section className="space-y-4">
      <h2 className="text-lg font-semibold">Quản lý đơn hàng</h2>

      <div className="bg-white rounded-2xl shadow p-4 space-y-3">
        <div className="flex flex-wrap gap-2 items-end">
          <label className="flex flex-col">
            <span className="text-sm text-gray-600">Tìm kiếm</span>
            <input value={q} onChange={e=>setQ(e.target.value)} onKeyDown={onKey}
                   placeholder="mã đơn, email, tên, sđt" className="border rounded px-3 py-2 w-72"/>
          </label>
          <label className="flex flex-col">
            <span className="text-sm text-gray-600">Trạng thái</span>
            <select value={status} onChange={e=>setStatus(e.target.value)} className="border rounded px-3 py-2">
              <option value="">Tất cả</option>
              <option value="PENDING">PENDING</option>
              <option value="PAID">PAID</option>
              <option value="CANCELLED">CANCELLED</option>
              <option value="REFUNDED">REFUNDED</option>
            </select>
          </label>
          <button onClick={()=>load(1)} className="px-4 py-2 rounded bg-black text-white">Lọc</button>
          {msg && <div className="text-sm text-red-600">{msg}</div>}
          {loading && <div className="text-sm text-gray-500">Đang tải…</div>}
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full text-sm">
            <thead>
              <tr className="text-left border-b">
                <th className="px-2 py-2">ID</th>
                <th className="px-2 py-2">Mã đơn</th>
                <th className="px-2 py-2">Khách</th>
                <th className="px-2 py-2">Tổng (VND)</th>
                <th className="px-2 py-2">Trạng thái</th>
                <th className="px-2 py-2">Ngày tạo</th>
                <th className="px-2 py-2 text-right">Thao tác</th>
              </tr>
            </thead>
            <tbody>
              {list.map(o=>(
                <Row
                  key={o.id}
                  o={o}
                  opened={openId===o.id}
                  onToggle={toggleView}
                  onRefund={refundOrder}
                  onCancel={cancelOrder}
                  detail={details[o.id]}
                  detailLoading={detailLoading===o.id}
                />
              ))}
              {list.length===0 && !loading && (
                <tr><td colSpan={7} className="text-center text-gray-500 py-6">Không có dữ liệu</td></tr>
              )}
            </tbody>
          </table>
        </div>

        <div className="flex items-center justify-between pt-2">
          <div className="text-xs text-gray-600">Tổng {total} đơn • Trang {page}/{pages}</div>
          <div className="flex gap-2">
            <button disabled={page<=1} onClick={()=>{ const p=Math.max(1,page-1); setPage(p); load(p); }} className="px-3 py-1 rounded border disabled:opacity-50">Trước</button>
            <button disabled={page>=pages} onClick={()=>{ const p=Math.min(pages,page+1); setPage(p); load(p); }} className="px-3 py-1 rounded border disabled:opacity-50">Sau</button>
          </div>
        </div>
      </div>
    </section>
  );
}

function StatusBadge({ status }){
  const map = {
    PENDING:'bg-yellow-100 text-yellow-800',
    PAID:'bg-emerald-100 text-emerald-800',
    CANCELLED:'bg-gray-200 text-gray-700',
    REFUNDED:'bg-blue-100 text-blue-800'
  };
  return <span className={`px-2 py-0.5 rounded-full text-[12px] ${map[status]||'bg-gray-100'}`}>{status}</span>;
}

function Row({ o, opened, onToggle, onRefund, onCancel, detail, detailLoading }){
  return (
    <>
      <tr className="border-b">
        <td className="px-2 py-2">{o.id}</td>
        <td className="px-2 py-2 font-mono">{o.orderCode}</td>
        <td className="px-2 py-2">{o.userEmail || o.userName || '—'}</td>
        <td className="px-2 py-2">{Number(o.total||0).toLocaleString('vi-VN')}</td>
        <td className="px-2 py-2"><StatusBadge status={o.status}/></td>
        <td className="px-2 py-2">{new Date(o.createdAt).toLocaleString('vi-VN')}</td>
        <td className="px-2 py-2 text-right space-x-2">
          <button onClick={()=>onToggle(o.id)} className="px-2 py-1 rounded border">{opened?'Đóng':'Xem'}</button>
          <button onClick={()=>onRefund(o.id)} disabled={o.status!=='PAID'} className="px-2 py-1 rounded border disabled:opacity-50">Hoàn tiền</button>
          <button onClick={()=>onCancel(o.id)} disabled={o.status!=='PENDING'} className="px-2 py-1 rounded border disabled:opacity-50">Hủy</button>
        </td>
      </tr>

      {opened && (
        <tr className="bg-gray-50">
          <td colSpan={7} className="p-3">
            {detailLoading && <div className="text-sm text-gray-500">Đang tải chi tiết…</div>}
            {!detailLoading && detail && <DetailBox detail={detail} />}
          </td>
        </tr>
      )}
    </>
  );
}

function DetailBox({ detail }){
  return (
    <div className="space-y-3 text-sm">
      <div className="flex flex-wrap gap-4">
        <div><span className="text-gray-600">Mã:</span> <span className="font-mono">{detail.orderCode}</span></div>
        <div><span className="text-gray-600">Khách:</span> {detail.userEmail || detail.userName || '—'}</div>
        <div><span className="text-gray-600">Tổng:</span> {Number(detail.total||0).toLocaleString('vi-VN')} VND</div>
        <div><span className="text-gray-600">Trạng thái:</span> {detail.status}</div>
        {detail.minStartAt && <div><span className="text-gray-600">Suất sớm nhất:</span> {new Date(detail.minStartAt).toLocaleString('vi-VN')}</div>}
      </div>

      <div>
        <div className="font-medium mb-1">Vé</div>
        <div className="grid md:grid-cols-2 gap-2">
          {detail.items?.tickets?.map(t=>(
            <div key={t.id} className="border rounded p-2 text-xs">
              <div>{t.movieTitle} • {t.roomName}</div>
              <div>Ghế: {t.seatLabel} • {t.status}</div>
              <div>Suất: {t.startAt ? new Date(t.startAt).toLocaleString('vi-VN') : '—'}</div>
              {t.qrCode && <div className="font-mono break-all">QR: {t.qrCode}</div>}
              {t.scannedAt && <div>Đã quét: {new Date(t.scannedAt).toLocaleString('vi-VN')}</div>}
            </div>
          ))}
          {(!detail.items || detail.items.tickets?.length===0) && <div className="text-xs text-gray-500">Không có vé</div>}
        </div>
      </div>

      <div>
        <div className="font-medium mb-1">Thanh toán</div>
        <div className="grid md:grid-cols-2 gap-2">
          {detail.payments?.map(p=>(
            <div key={p.id} className="border rounded p-2 text-xs">
              <div>Provider: {p.provider || '—'}</div>
              <div>Trạng thái: {p.status}</div>
              <div>Số tiền: {Number(p.amount||0).toLocaleString('vi-VN')} VND</div>
              <div>Thời gian: {p.createdAt ? new Date(p.createdAt).toLocaleString('vi-VN') : '—'}</div>
            </div>
          ))}
          {(!detail.payments || detail.payments.length===0) && <div className="text-xs text-gray-500">Không có giao dịch</div>}
        </div>
      </div>
    </div>
  );
}

```

### src\pages\admin\AdminPayments.jsx
```jsx
// client/src/pages/admin/AdminPayments.jsx
import { useEffect, useMemo, useState } from 'react';
const API = import.meta.env.VITE_API_BASE || '/api';

function Badge({ children, tone = 'gray' }) {
  const map = {
    gray: 'bg-gray-100 text-gray-800',
    blue: 'bg-blue-100 text-blue-800',
    green: 'bg-emerald-100 text-emerald-800',
    red: 'bg-rose-100 text-rose-800',
    purple: 'bg-purple-100 text-purple-800',
    orange: 'bg-orange-100 text-orange-800',
  };
  return <span className={`px-2 py-0.5 rounded-full text-xs ${map[tone]}`}>{children}</span>;
}
const STATUS_TONE = { INITIATED:'blue', SUCCESS:'green', FAILED:'red', REFUNDED:'purple' };

async function getJson(url) {
  const r = await fetch(url);
  const ct = r.headers.get('content-type') || '';
  if (!ct.includes('application/json')) {
    const text = await r.text();
    throw new Error(`Expect JSON, got: ${text.slice(0,100)}`);
  }
  const d = await r.json();
  if (!r.ok) throw new Error(d?.message || `HTTP ${r.status}`);
  return d;
}
const money = n => (Number(n||0)).toLocaleString('vi-VN') + ' đ';
const toLocal = s => s ? new Date(String(s).replace(' ', 'T') + 'Z').toLocaleString('vi-VN') : '';

export default function AdminPayments() {
  const [f, setF] = useState({ status:'', provider:'', q:'', page:1, pageSize:20 });
  const [data, setData] = useState({ items:[], total:0, page:1, pageSize:20 });
  const [err, setErr] = useState('');
  const [detailId, setDetailId] = useState(null);
  const [detail, setDetail] = useState(null);
  const [loading, setLoading] = useState(false);
  const [detailLoading, setDetailLoading] = useState(false);

  const qs = useMemo(() => {
    const u = new URLSearchParams();
    if (f.status) u.set('status', f.status);
    if (f.provider) u.set('provider', f.provider);
    if (f.q) u.set('q', f.q);
    u.set('page', String(f.page));
    u.set('pageSize', String(f.pageSize));
    return u.toString();
  }, [f.status, f.provider, f.q, f.page, f.pageSize]);

  const pages = useMemo(
    () => Math.max(1, Math.ceil((data.total || 0) / (f.pageSize || 20))),
    [data.total, f.pageSize]
  );

  useEffect(() => {
    (async () => {
      setLoading(true); setErr('');
      try { setData(await getJson(`${API}/payments?${qs}`)); }
      catch (e) { setErr(e.message); setData({ items:[], total:0, page:1, pageSize:f.pageSize }); }
      finally { setLoading(false); }
    })();
  }, [qs, f.pageSize]);

  const openDetail = async (id) => {
    setDetailId(id); setDetail(null); setDetailLoading(true);
    try { setDetail(await getJson(`${API}/payments/${id}`)); }
    catch (e) { setDetail({ error:e.message }); }
    finally { setDetailLoading(false); }
  };

  return (
    <section className="bg-white rounded-2xl shadow p-5 space-y-4">
      <h2 className="text-lg font-semibold">Thanh toán — Hiển thị & xử lý</h2>

      <div className="flex flex-wrap gap-2">
        <select value={f.status} onChange={e=>setF(s=>({ ...s, status:e.target.value, page:1 }))} className="border rounded px-2 py-2">
          <option value="">Tất cả trạng thái</option>
          <option value="INITIATED">INITIATED</option>
          <option value="SUCCESS">SUCCESS</option>
          <option value="FAILED">FAILED</option>
          <option value="REFUNDED">REFUNDED</option>
        </select>
        <select value={f.provider} onChange={e=>setF(s=>({ ...s, provider:e.target.value, page:1 }))} className="border rounded px-2 py-2">
          <option value="">Tất cả cổng</option>
          <option value="VNPAY">VNPAY</option>
          <option value="SANDBOX">SANDBOX</option>
        </select>
        <input value={f.q} onChange={e=>setF(s=>({ ...s, q:e.target.value, page:1 }))}
               onKeyDown={e=>{ if(e.key==='Enter') setF(s=>({ ...s })); }}
               placeholder="Tìm: order/ref/bank/ip/email/phone"
               className="border rounded px-2 py-2 w-80" />
        <button onClick={()=>setF(s=>({ ...s }))} className="px-4 rounded bg-black text-white">Lọc</button>
        <span className="text-sm text-gray-600 ml-auto">Tổng: {data.total}</span>
      </div>

      <div className="overflow-auto">
        <table className="min-w-full text-sm border">
          <thead className="bg-gray-50">
            <tr>
              <th className="p-2 border">ID</th>
              <th className="p-2 border">Order</th>
              <th className="p-2 border">Khách</th>
              <th className="p-2 border">Cổng</th>
              <th className="p-2 border">Trạng thái</th>
              <th className="p-2 border">Số tiền</th>
              <th className="p-2 border">Bank / TxnRef</th>
              <th className="p-2 border">Pay date</th>
              <th className="p-2 border">Tạo lúc</th>
              <th className="p-2 border">Xử lý</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr><td colSpan={10} className="p-4 text-center text-gray-500">Đang tải…</td></tr>
            ) : (data.items||[]).length === 0 ? (
              <tr><td colSpan={10} className="p-4 text-center text-gray-500">Không có dữ liệu</td></tr>
            ) : (data.items||[]).map(x => (
              <tr key={x.id} className="hover:bg-gray-50">
                <td className="p-2 border">{x.id}</td>
                <td className="p-2 border">#{x.orderId}</td>
                <td className="p-2 border">
                  <div className="flex flex-col">
                    <span>{x.email || '—'}</span>
                    <span className="text-xs text-gray-500">{x.phone || '—'}</span>
                  </div>
                </td>
                <td className="p-2 border"><Badge tone="orange">{x.provider || '—'}</Badge></td>
                <td className="p-2 border"><Badge tone={STATUS_TONE[x.status] || 'gray'}>{x.status}</Badge></td>
                <td className="p-2 border">{money(x.amount)}</td>
                <td className="p-2 border">{[x.bankCode, x.txnRef || x.refCode].filter(Boolean).join(' / ') || '—'}</td>
                <td className="p-2 border">{toLocal(x.payDate) || '—'}</td>
                <td className="p-2 border">{toLocal(x.createdAt)}</td>
                <td className="p-2 border">
                  <div className="flex gap-2">
                    <button onClick={()=>openDetail(x.id)} className="px-2 py-1 rounded border text-xs">Xem</button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="flex items-center gap-2">
        <select value={f.pageSize} onChange={e=>setF(s=>({ ...s, pageSize:Number(e.target.value), page:1 }))} className="border rounded px-2 py-1">
          {[10,20,50,100].map(n => <option key={n} value={n}>{n}/trang</option>)}
        </select>
        <div className="ml-auto flex items-center gap-2">
          <button disabled={f.page<=1} onClick={()=>setF(s=>({ ...s, page:s.page-1 }))} className="px-2 py-1 rounded border disabled:opacity-50">Trước</button>
          <span className="text-sm text-gray-600">Trang {data.page} / {pages}</span>
          <button disabled={f.page>=pages} onClick={()=>setF(s=>({ ...s, page:s.page+1 }))} className="px-2 py-1 rounded border disabled:opacity-50">Sau</button>
        </div>
      </div>

      {err && <div className="text-sm text-rose-600">Lỗi: {err}</div>}

      {detailId !== null && (
        <div className="fixed inset-0 bg-black/30 flex" onClick={()=>setDetailId(null)}>
          <div className="ml-auto w-full max-w-2xl h-full bg-white shadow-xl p-4 overflow-y-auto" onClick={e=>e.stopPropagation()}>
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-lg font-semibold">Chi tiết thanh toán #{detailId}</h3>
              <button onClick={()=>setDetailId(null)} className="px-2 py-1 rounded border">Đóng</button>
            </div>
            {detailLoading ? (
              <div className="text-gray-500">Đang tải…</div>
            ) : detail?.error ? (
              <div className="text-rose-600">{detail.error}</div>
            ) : detail ? (
              <div className="space-y-4 text-sm">
                <div className="border rounded p-3">
                  <div className="font-medium mb-2">Payment</div>
                  <div className="grid grid-cols-2 gap-2">
                    <div>Provider: <b>{detail.payment.provider}</b></div>
                    <div>Trạng thái: <Badge tone={STATUS_TONE[detail.payment.status] || 'gray'}>{detail.payment.status}</Badge></div>
                    <div>Số tiền: <b>{money(detail.payment.amount)}</b></div>
                    <div>Bank: {detail.payment.bankCode || '—'}</div>
                    <div>TxnRef: {detail.payment.merchantTxnRef || '—'}</div>
                    <div>Pay date: {toLocal(detail.payment.payDate) || '—'}</div>
                    <div>IP: {detail.payment.clientIp || '—'}</div>
                    <div>Fail reason: {detail.payment.failReason || '—'}</div>
                  </div>
                </div>

                <div className="border rounded p-3">
                  <div className="font-medium mb-2">Order</div>
                  <div className="grid grid-cols-2 gap-2">
                    <div>Code: <b>{detail.order.orderCode || `#${detail.order.id}`}</b></div>
                    <div>Trạng thái: <Badge tone={STATUS_TONE[detail.order.status] || 'gray'}>{detail.order.status}</Badge></div>
                    <div>Tổng: <b>{money(detail.order.total)}</b></div>
                    <div>Tạo lúc: {toLocal(detail.order.createdAt)}</div>
                    <div>Email: {detail.order.email || '—'}</div>
                    <div>Phone: {detail.order.phone || '—'}</div>
                  </div>
                </div>

                <div className="border rounded p-3">
                  <div className="font-medium mb-2">Vé</div>
                  {(detail.order.tickets||[]).length ? (
                    <div className="space-y-2">
                      {detail.order.tickets.map(t => (
                        <div key={t.id} className="flex items-center justify-between border rounded p-2">
                          <div>Ghế: <b>{t.rowLabel}{t.colNumber}</b> <span className="text-gray-500">({t.seatType})</span></div>
                          <div className="font-mono text-xs break-all">{t.qrCode}</div>
                        </div>
                      ))}
                    </div>
                  ) : <div className="text-gray-500">Không có vé</div>}
                </div>
              </div>
            ) : null}
          </div>
        </div>
      )}
    </section>
  );
}

```

### src\pages\admin\AdminReports.jsx
```jsx
import { useEffect, useMemo, useState } from 'react';

const API = import.meta.env.VITE_API_BASE || '/api';
const toISOStart = d => new Date(`${d}T00:00:00.000Z`).toISOString();
const toISOEnd   = d => new Date(`${d}T23:59:59.999Z`).toISOString();
const fmtMoney = n => (Number(n||0)).toLocaleString('vi-VN') + ' đ';
const toLocalDT = s => s ? new Date(s).toLocaleString('vi-VN') : '-';

async function getJson(url){
  const r = await fetch(url);
  const ct = r.headers.get('content-type') || '';
  const text = await r.text();
  if (!ct.includes('application/json')) throw new Error(`${r.status} ${r.statusText}`);
  const d = JSON.parse(text);
  if (!r.ok) throw new Error(d?.message || `HTTP ${r.status}`);
  return d;
}
async function getJsonOcc(url){
  const r = await fetch(url);
  const ct = r.headers.get('content-type') || '';
  const text = await r.text();
  if (r.status === 404) return [];
  if (!ct.includes('application/json')) throw new Error(`${r.status} ${r.statusText}`);
  const d = JSON.parse(text);
  if (!r.ok) throw new Error(d?.message || `HTTP ${r.status}`);
  return d;
}

function Card({ label, value }) {
  return (
    <div className="p-4 rounded-xl border bg-white">
      <div className="text-xs text-gray-500">{label}</div>
      <div className="text-xl font-semibold">{value}</div>
    </div>
  );
}

function EmptyBox({ title, height=220 }) {
  return (
    <div className="rounded-xl border bg-white flex items-center justify-center"
         style={{height}}>
      <div className="text-sm text-gray-500">Không có dữ liệu {title?.toLowerCase?.() || ''}</div>
    </div>
  );
}

function BarChart({ data, labelKey, valueKey, height=220, title='' }) {
  if (!data?.length) return <EmptyBox title={title} height={height} />;
  const max = Math.max(1, ...data.map(d => Number(d[valueKey] || 0)));
  const barW = 32, gap = 16;
  const width = data.length * (barW + gap) + gap;
  return (
    <svg width="100%" viewBox={`0 0 ${width} ${height}`} className="bg-white rounded-xl border">
      {data.map((d, i) => {
        const v = Number(d[valueKey] || 0);
        const h = Math.round((v / max) * (height - 40));
        const x = gap + i * (barW + gap);
        const y = height - 20 - h;
        return (
          <g key={i}>
            <rect x={x} y={y} width={barW} height={h} rx="6" className="fill-gray-800" />
            <text x={x + barW/2} y={height - 6} textAnchor="middle" className="text-[10px] fill-gray-700">
              {String(d[labelKey]).slice(0,12)}
            </text>
            <text x={x + barW/2} y={y - 4} textAnchor="middle" className="text-[10px] fill-gray-700">
              {v.toLocaleString('vi-VN')}
            </text>
          </g>
        );
      })}
    </svg>
  );
}

function LineChart({ data, xKey='date', yKey='net', height=220, title='' }) {
  if (!data?.length) return <EmptyBox title={title} height={height} />;
  const pad = 30;
  const width = Math.max(320, data.length * 50);
  const xs = data.map(d => d[xKey]);
  const ys = data.map(d => Number(d[yKey]||0));
  const minY = 0, maxY = Math.max(...ys, 1);
  const x = i => pad + (i * (width - 2*pad) / Math.max(1, xs.length - 1));
  const y = v => (height - pad) - ((v - minY) / (maxY - minY)) * (height - 2*pad);
  const path = ys.map((v,i)=>`${i===0?'M':'L'} ${x(i)} ${y(v)}`).join(' ');
  return (
    <svg width="100%" viewBox={`0 0 ${width} ${height}`} className="bg-white rounded-xl border">
      <line x1={pad} y1={height-pad} x2={width-pad} y2={height-pad} className="stroke-gray-300" />
      <line x1={pad} y1={pad} x2={pad} y2={height-pad} className="stroke-gray-300" />
      <path d={path} className="stroke-emerald-600 fill-none" strokeWidth="2" />
      {ys.map((v,i)=>(<circle key={i} cx={x(i)} cy={y(v)} r="2.5" className="fill-emerald-600" />))}
      {xs.map((d,i)=>(
        <text key={i} x={x(i)} y={height-6} textAnchor="middle" className="text-[10px] fill-gray-700">
          {String(d).slice(5)}
        </text>
      ))}
    </svg>
  );
}

export default function AdminReports(){
  const today = new Date().toISOString().slice(0,10);
  const weekAgo = new Date(Date.now() - 6*864e5).toISOString().slice(0,10);

  const [from,setFrom]=useState(weekAgo);
  const [to,setTo]=useState(today);
  const [occDate,setOccDate]=useState(today);

  const [sum,setSum]=useState(null);
  const [daily,setDaily]=useState([]);
  const [top,setTop]=useState([]);
  const [occ,setOcc]=useState([]);

  const [msgMain,setMsgMain]=useState('');
  const [msgOcc,setMsgOcc]=useState('');

  const loadMain = async ()=>{
    setMsgMain('');
    try{
      const [d1,d2,d3] = await Promise.all([
        getJson(`${API}/reports/summary?from=${encodeURIComponent(toISOStart(from))}&to=${encodeURIComponent(toISOEnd(to))}`),
        getJson(`${API}/reports/daily?from=${encodeURIComponent(toISOStart(from))}&to=${encodeURIComponent(toISOEnd(to))}`),
        getJson(`${API}/reports/top-movies?from=${encodeURIComponent(toISOStart(from))}&to=${encodeURIComponent(toISOEnd(to))}&limit=10`)
      ]);
      setSum(d1); setDaily(d2); setTop(d3);
    }catch(e){ setMsgMain(e.message); setSum(null); setDaily([]); setTop([]); }
  };

  const loadOcc = async ()=>{
    setMsgOcc('');
    try{
      const d4 = await getJsonOcc(`${API}/reports/occupancy?date=${encodeURIComponent(occDate)}`);
      setOcc(d4);
    }catch(e){ setMsgOcc(e.message); setOcc([]); }
  };

  useEffect(()=>{ loadMain(); loadOcc(); /* eslint-disable-next-line */ },[]);

  // CSV
  const csv = (rows, name)=>{
    const out = rows.map(r => r.map(x => {
      const s = String(x ?? '');
      return /[",\n]/.test(s) ? `"${s.replace(/"/g,'""')}"` : s;
    }).join(',')).join('\n');
    const blob = new Blob([out], { type:'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob); const a = document.createElement('a');
    a.href = url; a.download = name; a.click(); URL.revokeObjectURL(url);
  };
  const exportDaily = ()=> csv([['date','gross','refund','net','tickets','orders'], ...daily.map(d=>[d.date,d.gross,d.refund,d.net,d.tickets,d.orders])], `daily_${from}_to_${to}.csv`);
  const exportTop = ()=> csv([['movie_id','title','tickets_sold'], ...top.map(x=>[x.movie_id,x.title,x.tickets_sold])], `top_${from}_to_${to}.csv`);
  const exportOcc = ()=> csv([['showtime_id','movie_title','starts_at','sold','capacity','occupancy'], ...occ.map(x=>[x.showtime_id,x.movie_title,x.starts_at,x.sold,x.capacity,x.occupancy])], `occ_${occDate}.csv`);

  const netSeries = daily.map(d => ({ date: d.date, net: d.net }));
  const ticketsSeries = daily.map(d => ({ date: d.date, tickets: d.tickets }));
  const totalOcc = useMemo(()=>occ.reduce((a,b)=>a + (b.capacity||0),0),[occ]);
  const totalSold = useMemo(()=>occ.reduce((a,b)=>a + (b.sold||0),0),[occ]);

  return (
    <section className="space-y-4">
      <div className="bg-white rounded-2xl shadow p-5 space-y-4">
        <h2 className="text-xl font-semibold">Báo cáo</h2>

        {/* Bộ lọc */}
        <div className="grid lg:grid-cols-2 gap-3">
          <div className="border rounded p-3 space-y-2">
            <div className="text-sm font-medium">Khoảng thời gian</div>
            <div className="flex flex-wrap gap-2">
              <input type="date" value={from} onChange={e=>setFrom(e.target.value)} className="border rounded px-3 py-2"/>
              <input type="date" value={to} onChange={e=>setTo(e.target.value)} className="border rounded px-3 py-2"/>
              <button onClick={()=>{ loadMain(); loadOcc(); }} className="px-3 rounded bg-black text-white">Tải</button>
            </div>
            <div className="flex gap-2">
              <button onClick={()=>{const d=new Date(); d.setDate(d.getDate()-6); setFrom(d.toISOString().slice(0,10)); setTo(new Date().toISOString().slice(0,10));}}
                      className="text-xs px-2 py-1 rounded border">7 ngày</button>
              <button onClick={()=>{const d=new Date(); d.setDate(d.getDate()-29); setFrom(d.toISOString().slice(0,10)); setTo(new Date().toISOString().slice(0,10));}}
                      className="text-xs px-2 py-1 rounded border">30 ngày</button>
            </div>
            {msgMain && <div className="text-sm text-rose-600 break-words">{msgMain}</div>}
          </div>

          <div className="border rounded p-3 space-y-2">
            <div className="text-sm font-medium">Ngày tính occupancy</div>
            <div className="flex gap-2">
              <input type="date" value={occDate} onChange={e=>setOccDate(e.target.value)} className="border rounded px-3 py-2"/>
              <button onClick={loadOcc} className="px-3 rounded border">Làm mới</button>
            </div>
            {msgOcc && <div className="text-sm text-rose-600 break-words">{msgOcc}</div>}
          </div>
        </div>

        {/* Cards */}
        <div className="grid md:grid-cols-5 gap-3">
          <Card label="Doanh thu gộp" value={fmtMoney(sum?.gross_revenue || 0)} />
          <Card label="Hoàn tiền" value={fmtMoney(sum?.refund_total || 0)} />
          <Card label="Doanh thu ròng" value={fmtMoney(sum?.net_revenue || 0)} />
          <Card label="Vé đã bán" value={(sum?.tickets_sold || 0).toLocaleString('vi-VN')} />
          <Card label="Đơn đã thanh toán" value={(sum?.orders_count || 0).toLocaleString('vi-VN')} />
        </div>

        {/* Doanh thu theo ngày */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <h3 className="font-medium">Doanh thu ròng theo ngày</h3>
            <button onClick={exportDaily} className="text-sm px-3 py-1 rounded border">Xuất CSV</button>
          </div>
          <LineChart data={netSeries} xKey="date" yKey="net" title="doanh thu" />
        </div>

        {/* Vé theo ngày */}
        <div className="space-y-2">
          <h3 className="font-medium">Vé bán theo ngày</h3>
          <LineChart data={ticketsSeries} xKey="date" yKey="tickets" title="vé theo ngày" />
        </div>

        {/* Top phim */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <h3 className="font-medium">Top phim theo vé bán</h3>
            <button onClick={exportTop} className="text-sm px-3 py-1 rounded border">Xuất CSV</button>
          </div>
          <BarChart data={top.map(x => ({ label: x.title, value: x.tickets_sold }))} labelKey="label" valueKey="value" title="top phim" />

          <div className="overflow-auto border rounded">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="p-2 text-left">#</th>
                  <th className="p-2 text-left">Phim</th>
                  <th className="p-2 text-left">Vé bán</th>
                </tr>
              </thead>
              <tbody>
                {top.map((m,i)=>(
                  <tr key={m.movie_id} className="border-t">
                    <td className="p-2">{i+1}</td>
                    <td className="p-2">{m.title}</td>
                    <td className="p-2">{m.tickets_sold}</td>
                  </tr>
                ))}
                {top.length===0 && <tr><td colSpan={3} className="p-3 text-gray-500">Không có dữ liệu.</td></tr>}
              </tbody>
            </table>
          </div>
        </div>

        {/* Occupancy */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <h3 className="font-medium">Occupancy {occDate} — Tổng {totalSold}/{totalOcc} ghế</h3>
            <button onClick={exportOcc} className="text-sm px-3 py-1 rounded border">Xuất CSV</button>
          </div>
          <div className="overflow-auto border rounded">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-50">
                <tr>
                  <th className="p-2 text-left">Suất</th>
                  <th className="p-2 text-left">Phim</th>
                  <th className="p-2 text-left">Bắt đầu</th>
                  <th className="p-2 text-left">Đã bán</th>
                  <th className="p-2 text-left">Tỉ lệ</th>
                </tr>
              </thead>
              <tbody>
                {occ.map(o=>(
                  <tr key={o.showtime_id} className="border-t">
                    <td className="p-2">#{o.showtime_id}</td>
                    <td className="p-2">{o.movie_title}</td>
                    <td className="p-2">{toLocalDT(o.starts_at)}</td>
                    <td className="p-2">{o.sold}/{o.capacity}</td>
                    <td className="p-2">
                      <div className="w-48 h-2 bg-gray-200 rounded">
                        <div className="h-2 bg-emerald-600 rounded" style={{ width: `${Math.min(100, Math.round((o.occupancy||0)*100))}%` }} />
                      </div>
                      <span className="text-xs text-gray-600 ml-2">{Math.round((o.occupancy||0)*100)}%</span>
                    </td>
                  </tr>
                ))}
                {occ.length===0 && <tr><td colSpan={5} className="p-3 text-gray-500">Không có dữ liệu.</td></tr>}
              </tbody>
            </table>
          </div>
        </div>

      </div>
    </section>
  );
}

```

### src\pages\admin\AdminRooms.jsx
```jsx
// client/AdminRooms.jsx
import { useEffect, useState } from 'react';
const API = import.meta.env.VITE_API_BASE || '/api';

export default function AdminRooms() {
  const [exs, setExs] = useState([]);
  const [exFilter, setExFilter] = useState(0);
  const [branches, setBranches] = useState([]);
  const [list, setList] = useState([]);
  const [msg, setMsg] = useState('');
  const [editing, setEditing] = useState(null);

  const [f, setF] = useState({ branchId:'', name:'', formatType:'2D', isActive:true });
  const [eform, setEform] = useState({ id:0, branchId:'', name:'', formatType:'2D', isActive:true });

  async function loadExs(){ const r=await fetch(`${API}/exhibitors?pageSize=500`); const d=await r.json(); setExs(d.items||[]); }
  async function loadBranches(exId){ if(!exId){setBranches([]);return;} const r=await fetch(`${API}/branches?exhibitorId=${exId}&pageSize=500`); const d=await r.json(); setBranches(d.items||[]); }
  async function loadRooms(exId){ if(!exId){setList([]);return;} const r=await fetch(`${API}/exhibitors/${exId}/rooms`); const d=await r.json(); setList(Array.isArray(d)?d:[]); }

  useEffect(()=>{ loadExs(); },[]);
  useEffect(()=>{ loadBranches(exFilter); loadRooms(exFilter); },[exFilter]);

  async function createRoom(e){
    e.preventDefault(); setMsg('');
    const body = {
      branchId: Number(f.branchId||0),
      name: String(f.name||'').trim(),
      formatType: f.formatType,
      isActive: !!f.isActive
      // capacity bỏ, BE sẽ để 0 và cập nhật sau từ sơ đồ ghế
    };
    if(!body.branchId || !body.name){ setMsg('Nhập đủ Chi nhánh và Tên phòng'); return; }
    const r=await fetch(`${API}/rooms`, { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(body) });
    const d=await r.json(); if(!r.ok){ setMsg(d?.message||'Lỗi'); return; }
    setMsg('Đã tạo'); setF({ branchId:'', name:'', formatType:'2D', isActive:true }); await loadRooms(exFilter);
  }

  function startEdit(r){
    setEditing(r.id);
    setEform({ id:r.id, branchId:r.branch_id ?? r.branchId, name:r.name, formatType:r.format_type ?? r.formatType, isActive: !!(r.is_active ?? r.isActive) });
  }
  async function saveEdit(){
    setMsg('');
    const id = eform.id;
    const body = {
      branchId: Number(eform.branchId||0),
      name: String(eform.name||'').trim(),
      formatType: eform.formatType,
      isActive: !!eform.isActive
      // capacity không cho sửa ở đây
    };
    if(!body.branchId || !body.name){ setMsg('Thiếu dữ liệu'); return; }
    const r=await fetch(`${API}/rooms/${id}`, { method:'PATCH', headers:{'Content-Type':'application/json'}, body:JSON.stringify(body) });
    const d=await r.json(); if(!r.ok){ setMsg(d?.message||'Lỗi'); return; }
    setEditing(null); await loadRooms(exFilter);
  }
  async function remove(id){
    if(!confirm('Xoá phòng?')) return;
    setMsg('');
    const r=await fetch(`${API}/rooms/${id}`, { method:'DELETE' });
    const d=await r.json(); if(!r.ok){ setMsg(d?.message||'Lỗi'); return; }
    await loadRooms(exFilter);
  }
  async function recalc(id){
    setMsg('');
    const r=await fetch(`${API}/rooms/${id}/recalc-capacity`, { method:'POST' });
    const d=await r.json(); if(!r.ok){ setMsg(d?.message||'Đồng bộ lỗi'); return; }
    await loadRooms(exFilter);
  }

  return (
    <section className="bg-white rounded-2xl shadow p-5 space-y-4">
      <h2 className="text-lg font-semibold">Phòng chiếu</h2>

      {/* Filter theo hệ thống rạp */}
      <div className="flex flex-wrap gap-3 items-end">
        <div className="flex flex-col">
          <label className="text-sm font-medium mb-1">Hệ thống rạp</label>
          <select className="border rounded px-3 py-2 min-w-56" value={exFilter} onChange={e=>setExFilter(Number(e.target.value))}>
            <option value={0}>-- Chọn hệ thống rạp --</option>
            {exs.map(x => <option key={x.id} value={x.id}>{x.name}</option>)}
          </select>
        </div>
      </div>

      {/* Form tạo phòng */}
      <form onSubmit={createRoom} className="grid md:grid-cols-5 gap-3">
        <div className="flex flex-col">
          <label className="text-sm font-medium mb-1">Chi nhánh</label>
          <select className="border rounded px-3 py-2" value={f.branchId} onChange={e=>setF(p=>({...p, branchId:e.target.value}))}>
            <option value="">-- Chọn chi nhánh --</option>
            {branches.map(b => <option key={b.id} value={b.id}>{b.name}{b.city?` (${b.city})`:''}</option>)}
          </select>
        </div>
        <div className="flex flex-col">
          <label className="text-sm font-medium mb-1">Tên phòng</label>
          <input className="border rounded px-3 py-2" value={f.name} placeholder="VD: Phòng 1, Screen 2" onChange={e=>setF(p=>({...p, name:e.target.value}))}/>
        </div>
        <div className="flex flex-col">
          <label className="text-sm font-medium mb-1">Loại rạp chiếu</label>
          <select className="border rounded px-3 py-2" value={f.formatType} onChange={e=>setF(p=>({...p, formatType:e.target.value}))}>
            <option value="2D">2D</option>
            <option value="3D">3D</option>
            <option value="IMAX">IMAX</option>
            <option value="4DX">4DX</option>
          </select>
        </div>
        <div className="flex flex-col">
          <label className="text-sm font-medium mb-1">Số ghế</label>
          <input className="border rounded px-3 py-2 bg-gray-100" value="Tự tính từ sơ đồ ghế" disabled />
          <p className="text-xs text-gray-500 mt-1">Lưu sơ đồ ghế ở mục “Quản lý ghế”.</p>
        </div>
        <div className="flex items-center gap-2">
          <input id="active" type="checkbox" checked={f.isActive} onChange={e=>setF(p=>({...p, isActive:e.target.checked}))}/>
          <label htmlFor="active" className="text-sm">Kích hoạt</label>
        </div>
        <div className="md:col-span-5">
          <button className="px-4 py-2 rounded bg-black text-white">Tạo phòng</button>
          {msg && <span className="ml-3 text-sm text-red-600">{msg}</span>}
        </div>
      </form>

      {/* Danh sách phòng */}
      <div className="space-y-2">
        {list.map(r => (
          <div key={r.id} className="border rounded p-2 text-sm">
            {editing === r.id ? (
              <div className="grid md:grid-cols-6 gap-2 items-end">
                <div className="flex flex-col">
                  <label className="text-xs">Chi nhánh ID</label>
                  <input className="border rounded px-2 py-1" value={eform.branchId} onChange={e=>setEform(p=>({...p, branchId:e.target.value}))}/>
                </div>
                <div className="flex flex-col">
                  <label className="text-xs">Tên</label>
                  <input className="border rounded px-2 py-1" value={eform.name} onChange={e=>setEform(p=>({...p, name:e.target.value}))}/>
                </div>
                <div className="flex flex-col">
                  <label className="text-xs">Loại</label>
                  <select className="border rounded px-2 py-1" value={eform.formatType} onChange={e=>setEform(p=>({...p, formatType:e.target.value}))}>
                    <option value="2D">2D</option>
                    <option value="3D">3D</option>
                    <option value="IMAX">IMAX</option>
                    <option value="4DX">4DX</option>
                  </select>
                </div>
                <div className="flex flex-col">
                  <label className="text-xs">Số ghế</label>
                  <input className="border rounded px-2 py-1 bg-gray-100" value="Tự tính" disabled />
                </div>
                <div className="flex items-center gap-2">
                  <input id={`ea${r.id}`} type="checkbox" checked={eform.isActive} onChange={e=>setEform(p=>({...p, isActive:e.target.checked}))}/>
                  <label htmlFor={`ea${r.id}`} className="text-xs">Kích hoạt</label>
                </div>
                <div className="flex gap-2">
                  <button onClick={saveEdit} className="px-3 py-1 rounded bg-blue-600 text-white">Lưu</button>
                  <button onClick={()=>setEditing(null)} className="px-3 py-1 rounded bg-gray-200">Huỷ</button>
                </div>
              </div>
            ) : (
              <div className="flex flex-wrap items-center gap-x-6 gap-y-1">
                <div className="font-medium">{r.name}</div>
                <div>Chi nhánh: {r.branch_name || r.branchId}</div>
                <div>Loại: {r.format_type || r.formatType}</div>
                <div>Số ghế: {r.capacity ?? 0}</div>
                <div>Trạng thái: {(r.is_active ?? r.isActive) ? 'Active' : 'Inactive'}</div>
                <div className="ml-auto flex gap-2">
                  <button onClick={()=>recalc(r.id)} className="px-2 py-1 rounded bg-emerald-600 text-white">Đồng bộ số ghế</button>
                  <button onClick={()=>startEdit(r)} className="px-2 py-1 rounded bg-yellow-500 text-white">Sửa</button>
                  <button onClick={()=>remove(r.id)} className="px-2 py-1 rounded bg-red-600 text-white">Xoá</button>
                </div>
              </div>
            )}
          </div>
        ))}
        {list.length === 0 && <div className="text-sm text-gray-500">Chưa có dữ liệu.</div>}
      </div>
    </section>
  );
}

```

### src\pages\admin\AdminSeats.jsx
```jsx
import { useEffect, useMemo, useState } from 'react';

const API = import.meta.env.VITE_API_BASE || '/api';

// util tạo nhãn hàng: A,B,...,Z, AA, AB,...
function makeRowLabels(n){
  const out = [];
  for (let i=0;i<n;i++){
    let s = '', x = i;
    do { s = String.fromCharCode(65 + (x % 26)) + s; x = Math.floor(x/26) - 1; } while (x >= 0);
    out.push(s);
  }
  return out;
}

const TYPES = [
  { key: 'OFF',      label: 'Không đặt', cls: 'bg-gray-200 text-gray-600' },
  { key: 'STANDARD', label: 'Thường',    cls: 'bg-green-200 border border-green-600' },
  { key: 'VIP',      label: 'VIP',       cls: 'bg-yellow-200 border border-yellow-600' },
  { key: 'DOUBLE',   label: 'Sweetbox',  cls: 'bg-pink-200 border border-pink-600' },
];

export default function AdminSeats(){
  // chọn hệ thống rạp → phòng
  const [exs, setExs] = useState([]);
  const [exId, setExId] = useState(0);
  const [rooms, setRooms] = useState([]);
  const [roomId, setRoomId] = useState(0);

  // lưới
  const [rowsN, setRowsN] = useState(10);
  const [colsN, setColsN] = useState(15);
  const [grid, setGrid] = useState({}); // key `${r}|${c}` => 'OFF'|'STANDARD'|'VIP'|'DOUBLE'
  const [tool, setTool] = useState('STANDARD');
  const [msg, setMsg] = useState('');

  // load exhibitors
  useEffect(()=>{ (async()=>{
    const r = await fetch(`${API}/exhibitors?pageSize=500`); const d = await r.json();
    setExs(d.items||[]);
  })(); },[]);
  // load rooms theo exhibitor
  useEffect(()=>{ (async()=>{
    setRooms([]); setRoomId(0);
    if(!exId) return;
    const r = await fetch(`${API}/exhibitors/${exId}/rooms`); const d = await r.json();
    setRooms(Array.isArray(d)?d:[]);
  })(); },[exId]);

  // tải seats của phòng
  async function loadSeats(id){
    setMsg('');
    if(!id) return;
    const r = await fetch(`${API}/rooms/${id}/seats`);
    const d = await r.json();
    const list = Array.isArray(d) ? d : (d.items||[]);
    // ước lượng rows/cols
    const rows = new Set(); let maxCol = 0;
    const m = {};
    for (const s of list){
      const rl = s.row_label ?? s.rowLabel;
      const cn = s.col_number ?? s.colNumber;
      const tp = (s.seat_type ?? s.seatType ?? 'STANDARD').toUpperCase();
      rows.add(rl); if (cn>maxCol) maxCol = cn;
      m[`${rl}|${cn}`] = ['STANDARD','VIP','DOUBLE'].includes(tp) ? tp : 'STANDARD';
    }
    setRowsN(Math.max(rows.size || 10, 1));
    setColsN(Math.max(maxCol || 15, 1));
    setGrid(m);
  }
  useEffect(()=>{ if(roomId) loadSeats(roomId); },[roomId]);

  const rowLabels = useMemo(()=>makeRowLabels(rowsN),[rowsN]);
  const cells = (rl)=> Array.from({length: colsN}, (_,i)=> i+1).map(cn => {
    const key = `${rl}|${cn}`;
    return { rl, cn, type: grid[key] ?? 'OFF', key };
  });

  function paintCell(rl, cn){
    const key = `${rl}|${cn}`;
    setGrid(g => ({ ...g, [key]: tool }));
  }

  function clearAll(){
    setGrid({});
  }

  async function save(){
    setMsg('');
    if (!roomId) { setMsg('Chưa chọn phòng'); return; }
    const seats = [];
    for (const [k, v] of Object.entries(grid)){
      if (v === 'OFF') continue;
      const [rl, cn] = k.split('|'); seats.push({ rowLabel: rl, colNumber: Number(cn), seatType: v });
    }
    if (seats.length === 0) { setMsg('Chưa có ghế nào'); return; }
    const r = await fetch(`${API}/rooms/${roomId}/seats/layout`, {
      method:'PUT', headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ seats })
    });
    const d = await r.json();
    if(!r.ok){ setMsg(d?.message || 'Lưu lỗi'); return; }
    setMsg(`Đã lưu ${d.inserted} ghế`);
    loadSeats(roomId);
  }

  return (
    <section className="space-y-4">
      <h2 className="text-lg font-semibold">Quản lý ghế</h2>

      {/* Chọn rạp & phòng */}
      <div className="flex flex-wrap gap-3 items-end">
        <label className="flex flex-col">
          <span className="text-sm text-gray-600">Hệ thống rạp</span>
          <select value={exId} onChange={e=>setExId(Number(e.target.value))} className="border rounded px-3 py-2 min-w-56">
            <option value={0}>-- Chọn hệ thống rạp --</option>
            {exs.map(x=> <option key={x.id} value={x.id}>{x.name}</option>)}
          </select>
        </label>
        <label className="flex flex-col">
          <span className="text-sm text-gray-600">Phòng chiếu</span>
          <select value={roomId} onChange={e=>setRoomId(Number(e.target.value))} className="border rounded px-3 py-2 min-w-56">
            <option value={0}>-- Chọn phòng --</option>
            {rooms.map(r=> <option key={r.id} value={r.id}>{r.branch_name ? `${r.branch_name} • `:''}{r.name}</option>)}
          </select>
        </label>
      </div>

      {/* Cấu hình lưới + công cụ */}
      <div className="bg-white rounded-2xl shadow p-4 space-y-3">
        <div className="flex flex-wrap items-end gap-3">
          <label className="flex flex-col">
            <span className="text-sm text-gray-600">Số hàng</span>
            <input type="number" min={1} value={rowsN} onChange={e=>setRowsN(Math.max(1,Number(e.target.value||1)))} className="border rounded px-3 py-2 w-28"/>
          </label>
          <label className="flex flex-col">
            <span className="text-sm text-gray-600">Số cột</span>
            <input type="number" min={1} value={colsN} onChange={e=>setColsN(Math.max(1,Number(e.target.value||1)))} className="border rounded px-3 py-2 w-28"/>
          </label>

          <div className="ml-auto flex flex-wrap gap-2">
            {TYPES.map(t=>(
              <button key={t.key}
                onClick={()=>setTool(t.key)}
                className={`px-3 py-2 rounded ${tool===t.key?'ring-2 ring-black':''} ${t.cls} text-sm`}>
                {t.label}
              </button>
            ))}
            <button onClick={clearAll} className="px-3 py-2 rounded bg-gray-100 border text-sm">Xóa toàn bộ</button>
            <button onClick={save} className="px-4 py-2 rounded bg-black text-white text-sm">Lưu layout</button>
          </div>
        </div>

        {msg && <div className="text-sm text-emerald-700">{msg}</div>}

        {/* Lưới ghế */}
        <div className="mt-3 overflow-x-auto">
          <div className="inline-block p-4 bg-gray-50 rounded-xl border">
            <div className="text-center text-sm text-gray-600 mb-2">SCREEN</div>
            <div className="space-y-2">
              {rowLabels.map(rl=>(
                <div key={rl} className="flex items-center gap-2">
                  <div className="w-6 text-right font-medium">{rl}</div>
                  <div className="grid gap-1" style={{ gridTemplateColumns: `repeat(${colsN}, 2rem)` }}>
                    {cells(rl).map(cell=>{
                      const t = TYPES.find(x=>x.key===cell.type) || TYPES[0];
                      return (
                        <button key={cell.key}
                          onClick={()=>paintCell(cell.rl, cell.cn)}
                          className={`h-8 text-[11px] rounded select-none ${t.cls}`}
                          title={`${cell.rl}${cell.cn}`}>
                          {cell.rl}{cell.cn}
                        </button>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>

            {/* Chú thích */}
            <div className="mt-4 grid grid-cols-2 sm:grid-cols-4 gap-2 text-xs">
              {TYPES.map(t=>(
                <div key={t.key} className="flex items-center gap-2">
                  <span className={`w-4 h-4 rounded inline-block ${t.cls}`}></span>
                  <span>{t.label}</span>
                </div>
              ))}
            </div>
          </div>
        </div>

        <p className="text-xs text-gray-500 mt-2">
          Sau khi lưu, trang người dùng sẽ tự đánh dấu ghế đã giữ/đã bán từ API suất chiếu.
        </p>
      </div>
    </section>
  );
}

```

### src\pages\admin\AdminShowtimes.jsx
```jsx
// client/src/pages/admin/AdminShowtimes.jsx
import { useEffect, useState } from 'react';

const API = import.meta.env.VITE_API_BASE || '/api';
const inputToMySQL = v => (v ? v.replace('T', ' ') + ':00' : '');
const mysqlToInput = v => (v ? v.replace(' ', 'T').slice(0, 16) : '');

function roomLabel(r) {
  const name = r.name || r.roomName || r.room_name || `Room ${r.id}`;
  const fmt = r.formatType || r.format_type || '';
  const br = r.branchName || r.branch_name || '';
  return [name, fmt, br].filter(Boolean).join(' • ');
}

export default function AdminShowtimes() {
  const [movies, setMovies] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [list, setList] = useState([]);
  const [f, setF] = useState({ movieId: '', roomId: '', startAtMySQL: '', basePrice: 90000 });
  const [msg, setMsg] = useState('');
  const [editId, setEditId] = useState(null);

  const load = async () => {
    setMsg('');
    const [m, r, s] = await Promise.all([
      fetch(`${API}/movies?page=1&pageSize=200`).then(x => x.json()).catch(() => ({ items: [] })),
      fetch(`${API}/rooms?page=1&pageSize=500`).then(x => x.json()).catch(() => ({ items: [] })),
      fetch(`${API}/showtimes`).then(x => x.json()).catch(() => ({ items: [] })),
    ]);
    setMovies(m.items || []);
    setRooms(r.items || r || []);
    const arr = (s.items || s || []).map(x => ({
      id: x.id,
      title: x.title || x.movieTitle || x.movie_title,
      roomName: x.roomName || x.room_name,
      startAt: x.start_at || x.startAt,
      endAt:   x.end_at   || x.endAt,
      basePrice: x.base_price || x.basePrice,
      movieId: x.movie_id || x.movieId,
      roomId: x.room_id || x.roomId,
    }));
    setList(arr);
  };
  useEffect(() => { load(); }, []);

  const submit = async e => {
    e.preventDefault();
    setMsg('');
    const body = {
      movieId: Number(f.movieId),
      roomId: Number(f.roomId),
      startAt: f.startAtMySQL, // BE sẽ tính end_at theo duration_min
      basePrice: Number(String(f.basePrice).replace(',', '.')),
    };
    if (!body.movieId || !body.roomId || !body.startAt) { setMsg('Thiếu dữ liệu'); return; }

    const url = editId ? `${API}/showtimes/${editId}` : `${API}/showtimes`;
    const method = editId ? 'PUT' : 'POST';
    const r = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
    const d = await r.json().catch(() => ({}));
    if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }

    setEditId(null);
    setF({ movieId: '', roomId: '', startAtMySQL: '', basePrice: 90000 });
    load();
  };

  const edit = st => {
    setEditId(st.id);
    setF({
      movieId: st.movieId || st.movie_id || '',
      roomId: st.roomId || st.room_id || '',
      startAtMySQL: st.startAt || st.start_at || '',
      basePrice: st.basePrice || st.base_price || 90000,
    });
  };

  const del = async id => {
    if (!confirm('Xoá suất chiếu này?')) return;
    const r = await fetch(`${API}/showtimes/${id}`, { method: 'DELETE' });
    const d = await r.json().catch(() => ({}));
    if (!r.ok) { setMsg(d?.message || 'Lỗi'); return; }
    load();
  };

  const inputValue = mysqlToInput(f.startAtMySQL);

  return (
    <section className="bg-white rounded-2xl shadow p-5 space-y-4">
      <h2 className="text-lg font-semibold">Suất chiếu</h2>

      <form onSubmit={submit} className="grid md:grid-cols-5 gap-3">
        <label className="flex flex-col">
          <span className="text-sm text-gray-600">Phim</span>
          <select value={f.movieId} onChange={e => setF({ ...f, movieId: e.target.value })} className="border rounded px-2 py-2">
            <option value="">Chọn phim</option>
            {movies.map(m => <option key={m.id} value={m.id}>{m.title}</option>)}
          </select>
        </label>

        <label className="flex flex-col">
          <span className="text-sm text-gray-600">Phòng chiếu</span>
          <select value={f.roomId} onChange={e => setF({ ...f, roomId: e.target.value })} className="border rounded px-2 py-2">
            <option value="">Chọn phòng</option>
            {(rooms.items || rooms).map(r => (
              <option key={r.id} value={r.id}>{roomLabel(r)}</option>
            ))}
          </select>
        </label>

        <label className="flex flex-col">
          <span className="text-sm text-gray-600">Bắt đầu</span>
          <input
            type="datetime-local"
            value={inputValue}
            onChange={e => setF({ ...f, startAtMySQL: inputToMySQL(e.target.value) })}
            className="border rounded px-2 py-2"
            required
          />
        </label>

        <div className="flex flex-col opacity-60 pointer-events-none">
          <span className="text-sm text-gray-600">Kết thúc (tự tính)</span>
          <input type="text" value="Auto by BE" readOnly className="border rounded px-2 py-2" />
        </div>

        <label className="flex flex-col">
          <span className="text-sm text-gray-600">Giá vé cơ bản (VND)</span>
          <input
            type="number"
            value={f.basePrice}
            onChange={e => setF({ ...f, basePrice: e.target.value })}
            className="border rounded px-2 py-2"
          />
        </label>

        <div className="md:col-span-5 flex gap-2">
          <button className="px-4 rounded bg-black text-white">{editId ? 'Cập nhật' : 'Tạo'}</button>
          {editId && (
            <button
              type="button"
              onClick={() => { setEditId(null); setF({ movieId: '', roomId: '', startAtMySQL: '', basePrice: 90000 }); }}
              className="px-4 rounded bg-gray-300"
            >
              Hủy
            </button>
          )}
        </div>
      </form>

      {msg && <div className="text-sm text-red-600">{msg}</div>}

      <div className="space-y-2">
        {list.map(st => (
          <div key={st.id} className="border rounded p-2 flex justify-between text-sm">
            <div>
              #{st.id} • {st.title || '—'} • {st.roomName || '—'} • {st.startAt} → {st.endAt}
            </div>
            <div className="flex gap-2">
              <button onClick={() => edit(st)} className="text-blue-600 text-sm">Sửa</button>
              <button onClick={() => del(st.id)} className="text-red-600 text-sm">Xóa</button>
            </div>
          </div>
        ))}
        {list.length === 0 && <div className="text-sm text-gray-500">Chưa có dữ liệu.</div>}
      </div>
    </section>
  );
}

```

### src\pages\admin\AdminTickets.jsx
```jsx
// client/AdminTickets.jsx
import { useEffect, useMemo, useState } from 'react';
const API = import.meta.env.VITE_API_BASE || '/api';

function Badge({ children, tone='gray' }) {
  const map = {
    gray:'bg-gray-100 text-gray-800',
    green:'bg-emerald-100 text-emerald-800',
    blue:'bg-blue-100 text-blue-800'
  };
  return <span className={`px-2 py-0.5 rounded-full text-xs ${map[tone]}`}>{children}</span>;
}
const toLocal = s => s ? new Date(s.replace(' ','T')+'Z').toLocaleString('vi-VN') : '';
const short = s => s?.length>10 ? s.slice(0,10)+'…' : (s||'');

export default function AdminTickets(){
  const [list,setList]=useState([]);
  const [total,setTotal]=useState(0);
  const [page,setPage]=useState(1);
  const [pageSize,setPageSize]=useState(20);
  const [status,setStatus]=useState('');
  const [q,setQ]=useState('');
  const [dateFrom,setDateFrom]=useState('');
  const [dateTo,setDateTo]=useState('');
  const [loading,setLoading]=useState(false);
  const [msg,setMsg]=useState('');

  const totalPages = useMemo(()=>Math.max(1, Math.ceil(total/pageSize)),[total,pageSize]);

  const load = async ()=>{
    setLoading(true); setMsg('');
    try{
      const qs = new URLSearchParams({ page, pageSize });
      if(status) qs.set('status', status);
      if(q) qs.set('q', q);
      if(dateFrom) qs.set('dateFrom', dateFrom);
      if(dateTo) qs.set('dateTo', dateTo);
      const r = await fetch(`${API}/tickets?`+qs.toString());
      const d = await r.json();
      if(!r.ok) throw new Error(d?.message||`HTTP ${r.status}`);
      setList(d.items||[]); setTotal(d.total||0);
    }catch(e){ setMsg(e.message); setList([]); setTotal(0); }
    finally{ setLoading(false); }
  };

  useEffect(()=>{ load(); /* eslint-disable-next-line */ },[page,pageSize,status,dateFrom,dateTo]);

  const scan = async (row)=>{
    setMsg('');
    try{
      const r = await fetch(`${API}/tickets/scan`,{
        method:'POST', headers:{'Content-Type':'application/json'},
        body: JSON.stringify({ showtimeId: row.showtimeId, qrCode: row.qrCode })
      });
      const d = await r.json();
      if(!r.ok) throw new Error(d?.message||`HTTP ${r.status}`);
      setMsg(`Quét OK: #${d.id} • ${d.status}`);
      load();
    }catch(e){ setMsg('Quét lỗi: '+e.message); }
  };

  const onKey = (e)=>{ if(e.key==='Enter'){ setPage(1); load(); } };

  return (
    <section className="bg-white rounded-2xl shadow p-5 space-y-4">
      <h2 className="text-lg font-semibold">Vé — Bảng danh sách</h2>

      {/* Bộ lọc */}
      <div className="flex flex-wrap items-center gap-2">
        <select value={status} onChange={e=>{setStatus(e.target.value); setPage(1);}} className="border rounded px-3 py-2">
          <option value="">Tất cả trạng thái</option>
          <option value="ISSUED">ISSUED</option>
          <option value="SCANNED">SCANNED</option>
        </select>
        <input value={q} onChange={e=>setQ(e.target.value)} onKeyDown={onKey}
               placeholder="Tìm: QR / Order / Email / Phone / Phim / Ghế / Rạp"
               className="border rounded px-3 py-2 w-96"/>
        <input type="date" value={dateFrom} onChange={e=>{setDateFrom(e.target.value); setPage(1);}}
               className="border rounded px-3 py-2"/>
        <input type="date" value={dateTo} onChange={e=>{setDateTo(e.target.value); setPage(1);}}
               className="border rounded px-3 py-2"/>
        <button onClick={()=>{setPage(1); load();}} className="px-3 py-2 rounded bg-black text-white">Lọc</button>
        <span className="text-sm text-gray-600 ml-auto">Tổng: {total}</span>
      </div>

      {/* Bảng vé */}
      <div className="overflow-auto">
        <table className="min-w-[1000px] w-full border rounded">
          <thead className="bg-gray-50 text-left">
            <tr>
              <th className="px-3 py-2 border-b">ID</th>
              <th className="px-3 py-2 border-b">QR</th>
              <th className="px-3 py-2 border-b">Ghế</th>
              <th className="px-3 py-2 border-b">Trạng thái</th>
              <th className="px-3 py-2 border-b">Suất chiếu</th>
              <th className="px-3 py-2 border-b">Phim</th>
              <th className="px-3 py-2 border-b">Phòng</th>
              <th className="px-3 py-2 border-b">Rạp</th>
              <th className="px-3 py-2 border-b">Order</th>
              <th className="px-3 py-2 border-b">Khách</th>
              <th className="px-3 py-2 border-b">Đã quét</th>
              <th className="px-3 py-2 border-b">Thao tác</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr><td colSpan={12} className="px-3 py-6 text-center text-gray-500">Đang tải…</td></tr>
            ) : list.length===0 ? (
              <tr><td colSpan={12} className="px-3 py-6 text-center text-gray-500">Không có dữ liệu</td></tr>
            ) : list.map(row=>(
              <tr key={row.id} className="hover:bg-gray-50">
                <td className="px-3 py-2 border-b">{row.id}</td>
                <td className="px-3 py-2 border-b">
                  <div className="font-mono text-xs">{short(row.qrCode)}</div>
                  <button
                    className="text-[10px] text-blue-700 underline"
                    onClick={()=>navigator.clipboard?.writeText(row.qrCode)}
                  >copy</button>
                </td>
                <td className="px-3 py-2 border-b">
                  <div><b>{row.seat?.row}{row.seat?.col}</b></div>
                  <div className="text-xs text-gray-500">{row.seat?.type}</div>
                </td>
                <td className="px-3 py-2 border-b">
                  <Badge tone={row.status==='SCANNED'?'green':'blue'}>{row.status}</Badge>
                </td>
                <td className="px-3 py-2 border-b text-sm">{toLocal(row.startAt)}</td>
                <td className="px-3 py-2 border-b">{row.movieTitle}</td>
                <td className="px-3 py-2 border-b">{row.roomName}</td>
                <td className="px-3 py-2 border-b">
                  <div>{row.branchName}</div>
                  <div className="text-xs text-gray-500">{row.city}</div>
                </td>
                <td className="px-3 py-2 border-b">
                  <div className="text-sm">{row.orderCode}</div>
                  <div className="text-xs text-gray-500">#{row.orderId}</div>
                </td>
                <td className="px-3 py-2 border-b text-sm">
                  <div>{row.email || '—'}</div>
                  <div className="text-xs text-gray-500">{row.phone || '—'}</div>
                </td>
                <td className="px-3 py-2 border-b text-sm">{row.scannedAt ? toLocal(row.scannedAt) : '—'}</td>
                <td className="px-3 py-2 border-b">
                  <button
                    disabled={row.status==='SCANNED'}
                    onClick={()=>scan(row)}
                    className="px-2 py-1 rounded border disabled:opacity-50 text-sm"
                  >Quét</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Phân trang */}
      <div className="flex items-center gap-2">
        <select value={pageSize} onChange={e=>{setPageSize(Number(e.target.value)); setPage(1);}}
                className="border rounded px-2 py-1">
          {[10,20,50,100].map(n=><option key={n} value={n}>{n}/trang</option>)}
        </select>
        <div className="ml-auto flex items-center gap-2">
          <button disabled={page<=1} onClick={()=>setPage(p=>Math.max(1,p-1))}
                  className="px-2 py-1 rounded border disabled:opacity-50">Trước</button>
          <span className="text-sm text-gray-600">Trang {page}/{totalPages}</span>
          <button disabled={page>=totalPages} onClick={()=>setPage(p=>Math.min(totalPages,p+1))}
                  className="px-2 py-1 rounded border disabled:opacity-50">Sau</button>
        </div>
      </div>

      {msg && <div className="text-sm text-gray-700">{msg}</div>}
    </section>
  );
}

```

### src\pages\admin\AdminUsers.jsx
```jsx
import { useEffect, useState } from 'react';

export default function AdminUsers() {
  const [list, setList] = useState([]);
  const [msg, setMsg] = useState('');
  const [q, setQ] = useState('');
  const [f, setF] = useState({
    email: '',
    fullName: '',
    phone: '',
    role: 'CUSTOMER',
    isActive: true,
  });

  const norm = u => ({
    id: u.id,
    email: u.email,
    fullName: u.fullName || u.name || '',
    phone: u.phone || '',
    role: u.role || 'CUSTOMER',
    isActive: u.isActive ?? (u.is_active ?? true),
    createdAt: u.createdAt || u.created_at,
  });

  async function load() {
    setMsg('');
    const r = await fetch(`/api/users${q ? `?q=${encodeURIComponent(q)}` : ''}`);
    const d = await r.json();
    setList((d.items || d || []).map(norm));
  }
  useEffect(() => { load(); }, []);

  async function createUser(e) {
    e.preventDefault();
    setMsg('');
    const body = {
      email: f.email.trim(),
      fullName: f.fullName.trim(),
      phone: f.phone.trim(),
      role: f.role,
      isActive: !!f.isActive,
    };
    const r = await fetch('/api/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });
    const d = await r.json();
    if (!r.ok) { setMsg(d?.message || 'Tạo user lỗi'); return; }
    setF({ email: '', fullName: '', phone: '', role: 'CUSTOMER', isActive: true });
    load();
  }

  async function toggleActive(u) {
    const r = await fetch(`/api/users/${u.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ isActive: !u.isActive }),
    });
    if (!r.ok) { const d = await r.json(); setMsg(d?.message || 'Cập nhật lỗi'); return; }
    load();
  }

  return (
    <section className="bg-white rounded-2xl shadow p-5 space-y-4">
      <h2 className="text-lg font-semibold">Quản lý người dùng</h2>

      <form onSubmit={createUser} className="grid md:grid-cols-6 gap-2">
        <input value={f.email} onChange={e=>setF({...f,email:e.target.value})} placeholder="Email" className="border rounded px-3 py-2 md:col-span-2" />
        <input value={f.fullName} onChange={e=>setF({...f,fullName:e.target.value})} placeholder="Họ tên" className="border rounded px-3 py-2 md:col-span-2" />
        <input value={f.phone} onChange={e=>setF({...f,phone:e.target.value})} placeholder="Điện thoại" className="border rounded px-3 py-2" />
        <select value={f.role} onChange={e=>setF({...f,role:e.target.value})} className="border rounded px-3 py-2">
          <option value="CUSTOMER">CUSTOMER</option>
          <option value="STAFF">STAFF</option>
          <option value="ADMIN">ADMIN</option>
        </select>
        <label className="flex items-center gap-2 text-sm">
          <input type="checkbox" checked={f.isActive} onChange={e=>setF({...f,isActive:e.target.checked})}/> Active
        </label>
        <button className="px-4 rounded bg-black text-white">Tạo</button>
      </form>

      <div className="flex gap-2">
        <input value={q} onChange={e=>setQ(e.target.value)} placeholder="Tìm theo email/tên" className="border rounded px-3 py-2 w-full max-w-md" />
        <button onClick={load} className="px-3 rounded bg-gray-800 text-white">Tìm</button>
      </div>

      {msg && <div className="text-sm text-red-600">{msg}</div>}

      <div className="overflow-auto border rounded">
        <table className="min-w-full text-sm">
          <thead className="bg-gray-50">
            <tr>
              <th className="p-2 text-left">ID</th>
              <th className="p-2 text-left">Email</th>
              <th className="p-2 text-left">Họ tên</th>
              <th className="p-2 text-left">Điện thoại</th>
              <th className="p-2 text-left">Role</th>
              <th className="p-2 text-left">Trạng thái</th>
              <th className="p-2"></th>
            </tr>
          </thead>
          <tbody>
            {list.map(u=>(
              <tr key={u.id} className="border-t">
                <td className="p-2">{u.id}</td>
                <td className="p-2">{u.email}</td>
                <td className="p-2">{u.fullName}</td>
                <td className="p-2">{u.phone}</td>
                <td className="p-2">{u.role}</td>
                <td className="p-2">
                  <span className={`px-2 py-0.5 rounded text-xs ${u.isActive?'bg-emerald-100 text-emerald-700':'bg-gray-200'}`}>
                    {u.isActive?'ACTIVE':'INACTIVE'}
                  </span>
                </td>
                <td className="p-2 text-right">
                  <button onClick={()=>toggleActive(u)} className="text-xs px-2 py-1 rounded bg-blue-600 text-white">
                    {u.isActive?'Deactivate':'Activate'}
                  </button>
                </td>
              </tr>
            ))}
            {list.length===0 && (
              <tr><td className="p-3 text-gray-500" colSpan={7}>Chưa có dữ liệu.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </section>
  );
}

```

### src\pages\admin\AdminVouchers.jsx
```jsx
import { useEffect, useState } from 'react';
const API = import.meta.env.VITE_API_BASE || '/api';
const money = v => (Number(v||0)).toLocaleString('vi-VN') + ' đ';
const toLocal = s => s ? new Date(s).toLocaleString('vi-VN') : '-';

function CodeChip({ text }) {
  return <span className="font-mono text-xs px-2 py-1 rounded bg-gray-100">{text}</span>;
}

export default function AdminVouchers() {
  const [list, setList] = useState([]);
  const [q, setQ] = useState('');
  const [msg, setMsg] = useState('');
  const [creating, setCreating] = useState({
    code:'', kind:'AMOUNT', value:50000, minTotal:0, expiryAt:'', quota:'', perUserLimit:1, isActive:true
  });
  const [editRow, setEditRow] = useState(null);

  const load = async () => {
    setMsg('');
    const qs = new URLSearchParams(); if (q) qs.set('q', q);
    const r = await fetch(`${API}/vouchers?`+qs.toString());
    const d = await r.json();
    if (!r.ok) { setMsg(d?.message||`HTTP ${r.status}`); setList([]); return; }
    setList(d.items || []);
  };
  useEffect(()=>{ load(); }, []);

  const randLocal = () => {
    const ABC = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
    let s=''; for(let i=0;i<10;i++) s += ABC[Math.floor(Math.random()*ABC.length)];
    return s;
  };

  const createVoucher = async (e) => {
    e.preventDefault();
    setMsg('');
    const body = {
      code: creating.code?.trim() || undefined,
      kind: creating.kind,
      value: Number(creating.value),
      minTotal: Number(creating.minTotal||0),
      expiryAt: creating.expiryAt ? new Date(creating.expiryAt).toISOString() : null,
      quota: creating.quota === '' ? null : Number(creating.quota),
      perUserLimit: Number(creating.perUserLimit||1),
      isActive: !!creating.isActive
    };
    const r = await fetch(`${API}/vouchers`, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
    const d = await r.json();
    if (!r.ok) { setMsg(d?.message || 'Tạo thất bại'); return; }
    setMsg(`Đã tạo: ${d.code}`);
    setCreating({ code:'', kind:'AMOUNT', value:50000, minTotal:0, expiryAt:'', quota:'', perUserLimit:1, isActive:true });
    load();
  };

  const saveEdit = async () => {
    if (!editRow) return;
    setMsg('');
    const body = {
      code: editRow.code?.trim(),
      kind: editRow.kind,
      value: Number(editRow.value),
      minTotal: Number(editRow.minTotal||0),
      expiryAt: editRow.expiryAt ? new Date(editRow.expiryAt).toISOString() : null,
      quota: editRow.quota === '' ? null : Number(editRow.quota),
      perUserLimit: Number(editRow.perUserLimit||1),
      isActive: !!editRow.isActive
    };
    const r = await fetch(`${API}/vouchers/${editRow.id}`, { method:'PUT', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
    const d = await r.json().catch(()=>({}));
    if (!r.ok) { setMsg(d?.message || 'Sửa thất bại'); return; }
    setEditRow(null); load();
  };

  const remove = async (id) => {
    if (!confirm('Xoá voucher này?')) return;
    setMsg('');
    const r = await fetch(`${API}/vouchers/${id}`, { method:'DELETE' });
    const d = await r.json().catch(()=>({}));
    if (!r.ok) { setMsg(d?.message || 'Xoá thất bại'); return; }
    load();
  };

  return (
    <section className="bg-white rounded-2xl shadow p-5 space-y-5">
      <h2 className="text-lg font-semibold">Quản lý voucher</h2>

      {/* Tìm kiếm */}
      <div className="flex flex-wrap gap-2">
        <input value={q} onChange={e=>setQ(e.target.value)} placeholder="Tìm theo code"
               className="border rounded px-3 py-2 w-64"/>
        <button onClick={load} className="px-3 rounded bg-black text-white">Tìm</button>
        {msg && <span className="text-sm text-gray-700 ml-auto">{msg}</span>}
      </div>

      {/* Tạo mới: chia nhiều dòng */}
      <form onSubmit={createVoucher} className="border rounded p-4 space-y-3">
        {/* Dòng 1: Code + Random + Active */}
        <div className="grid md:grid-cols-3 gap-3">
          <div className="md:col-span-2">
            <label className="block text-xs text-gray-500 mb-1">Code (để trống sẽ random)</label>
            <div className="flex gap-2">
              <input value={creating.code}
                     onChange={e=>setCreating({...creating,code:e.target.value.toUpperCase()})}
                     placeholder="VD: AUTO"
                     className="border rounded px-3 py-2 w-full"/>
              <button type="button" onClick={()=>setCreating({...creating,code:randLocal()})}
                      className="px-2 rounded border">Random</button>
            </div>
          </div>
          <label className="flex items-end gap-2 text-sm">
            <input type="checkbox" checked={creating.isActive}
                   onChange={e=>setCreating({...creating,isActive:e.target.checked})}/>
            Active
          </label>
        </div>

        {/* Dòng 2: Loại + Giá trị + Min tổng */}
        <div className="grid md:grid-cols-3 gap-3">
          <div>
            <label className="block text-xs text-gray-500 mb-1">Loại</label>
            <select value={creating.kind} onChange={e=>setCreating({...creating,kind:e.target.value})}
                    className="border rounded px-3 py-2 w-full">
              <option value="AMOUNT">AMOUNT (VND)</option>
              <option value="PERCENT">PERCENT (%)</option>
            </select>
          </div>
          <div>
            <label className="block text-xs text-gray-500 mb-1">Giá trị</label>
            <input type="number" value={creating.value}
                   onChange={e=>setCreating({...creating,value:e.target.value})}
                   className="border rounded px-3 py-2 w-full"/>
          </div>
          <div>
            <label className="block text-xs text-gray-500 mb-1">Min tổng</label>
            <input type="number" value={creating.minTotal}
                   onChange={e=>setCreating({...creating,minTotal:e.target.value})}
                   className="border rounded px-3 py-2 w-full"/>
          </div>
        </div>

        {/* Dòng 3: Hết hạn + Quota + /User */}
        <div className="grid md:grid-cols-3 gap-3">
          <div>
            <label className="block text-xs text-gray-500 mb-1">Hết hạn</label>
            <input type="datetime-local" value={creating.expiryAt}
                   onChange={e=>setCreating({...creating,expiryAt:e.target.value})}
                   className="border rounded px-3 py-2 w-full"/>
          </div>
          <div>
            <label className="block text-xs text-gray-500 mb-1">Quota</label>
            <input type="number" value={creating.quota}
                   onChange={e=>setCreating({...creating,quota:e.target.value})}
                   placeholder="trống = không giới hạn"
                   className="border rounded px-3 py-2 w-full"/>
          </div>
          <div>
            <label className="block text-xs text-gray-500 mb-1">/User</label>
            <input type="number" value={creating.perUserLimit}
                   onChange={e=>setCreating({...creating,perUserLimit:e.target.value})}
                   className="border rounded px-3 py-2 w-full"/>
          </div>
        </div>

        {/* Dòng 4: Nút tạo */}
        <div className="flex">
          <button className="px-4 rounded bg-black text-white ml-auto">Tạo</button>
        </div>
      </form>

      {/* Bảng */}
      <div className="overflow-auto border rounded">
        <table className="min-w-full text-sm">
          <thead className="bg-gray-50">
            <tr>
              <th className="p-2 text-left">ID</th>
              <th className="p-2 text-left">Code</th>
              <th className="p-2 text-left">Loại</th>
              <th className="p-2 text-left">Giá trị</th>
              <th className="p-2 text-left">Min tổng</th>
              <th className="p-2 text-left">Hết hạn</th>
              <th className="p-2 text-left">Quota</th>
              <th className="p-2 text-left">/User</th>
              <th className="p-2 text-left">Trạng thái</th>
              <th className="p-2"></th>
            </tr>
          </thead>
          <tbody>
            {list.map(v=>(
              <tr key={v.id} className="border-t">
                <td className="p-2">{v.id}</td>
                <td className="p-2"><CodeChip text={v.code} /></td>
                <td className="p-2">{v.kind}</td>
                <td className="p-2">{v.kind==='PERCENT' ? `${v.value}%` : money(v.value)}</td>
                <td className="p-2">{money(v.minTotal)}</td>
                <td className="p-2">{toLocal(v.expiryAt)}</td>
                <td className="p-2">{v.quota ?? '-'}</td>
                <td className="p-2">{v.perUserLimit}</td>
                <td className="p-2">
                  <span className={`px-2 py-0.5 rounded text-xs ${v.isActive?'bg-emerald-100 text-emerald-700':'bg-gray-200'}`}>
                    {v.isActive?'ACTIVE':'INACTIVE'}
                  </span>
                </td>
                <td className="p-2 text-right space-x-2">
                  <button onClick={()=>setEditRow({...v})}
                          className="text-xs px-2 py-1 rounded border">Sửa</button>
                  <button onClick={()=>remove(v.id)}
                          className="text-xs px-2 py-1 rounded bg-rose-600 text-white">Xoá</button>
                </td>
              </tr>
            ))}
            {list.length===0 && (
              <tr><td className="p-3 text-gray-500" colSpan={10}>Chưa có dữ liệu.</td></tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Panel Sửa */}
      {editRow && (
        <div className="fixed inset-0 bg-black/30 flex" onClick={()=>setEditRow(null)}>
          <div className="ml-auto w-full max-w-xl h-full bg-white p-4 overflow-y-auto" onClick={e=>e.stopPropagation()}>
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-lg font-semibold">Sửa voucher #{editRow.id}</h3>
              <button onClick={()=>setEditRow(null)} className="px-2 py-1 rounded border">Đóng</button>
            </div>

            <div className="space-y-3">
              <div>
                <label className="block text-xs text-gray-500 mb-1">Code</label>
                <div className="flex gap-2">
                  <input value={editRow.code} onChange={e=>setEditRow({...editRow, code:e.target.value.toUpperCase()})}
                         className="border rounded px-3 py-2 w-full"/>
                  <button type="button" onClick={()=>setEditRow({...editRow, code:randLocal()})}
                          className="px-2 rounded border">Random</button>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-xs text-gray-500 mb-1">Loại</label>
                  <select value={editRow.kind} onChange={e=>setEditRow({...editRow,kind:e.target.value})}
                          className="border rounded px-3 py-2 w-full">
                    <option value="AMOUNT">AMOUNT</option>
                    <option value="PERCENT">PERCENT</option>
                  </select>
                </div>
                <div>
                  <label className="block text-xs text-gray-500 mb-1">Giá trị</label>
                  <input type="number" value={editRow.value} onChange={e=>setEditRow({...editRow,value:e.target.value})}
                         className="border rounded px-3 py-2 w-full"/>
                </div>
                <div>
                  <label className="block text-xs text-gray-500 mb-1">Min tổng</label>
                  <input type="number" value={editRow.minTotal} onChange={e=>setEditRow({...editRow,minTotal:e.target.value})}
                         className="border rounded px-3 py-2 w-full"/>
                </div>
                <div>
                  <label className="block text-xs text-gray-500 mb-1">Quota</label>
                  <input type="number" value={editRow.quota ?? ''} onChange={e=>setEditRow({...editRow,quota:e.target.value})}
                         placeholder="trống = không giới hạn" className="border rounded px-3 py-2 w-full"/>
                </div>
                <div>
                  <label className="block text-xs text-gray-500 mb-1">/User</label>
                  <input type="number" value={editRow.perUserLimit} onChange={e=>setEditRow({...editRow,perUserLimit:e.target.value})}
                         className="border rounded px-3 py-2 w-full"/>
                </div>
                <div>
                  <label className="block text-xs text-gray-500 mb-1">Hết hạn</label>
                  <input type="datetime-local"
                         value={editRow.expiryAt ? new Date(editRow.expiryAt).toISOString().slice(0,16) : ''}
                         onChange={e=>setEditRow({...editRow,expiryAt:e.target.value})}
                         className="border rounded px-3 py-2 w-full"/>
                </div>
              </div>

              <label className="text-sm">
                <input type="checkbox" checked={!!editRow.isActive}
                       onChange={e=>setEditRow({...editRow,isActive:e.target.checked})}/> Active
              </label>

              <div className="flex gap-2">
                <button onClick={saveEdit} className="px-3 py-2 rounded bg-black text-white">Lưu</button>
                <button onClick={()=>setEditRow(null)} className="px-3 py-2 rounded border">Huỷ</button>
              </div>
            </div>
          </div>
        </div>
      )}
    </section>
  );
}

```
